

Started GET "/" for 127.0.0.1 at 2014-05-21 10:49:46 +0200

ActiveRecord::PendingMigrationError (

Migrations are pending. To resolve this issue, run:

	bin/rake db:migrate RAILS_ENV=development

):
  activerecord (4.1.1) lib/active_record/migration.rb:389:in `check_pending!'
  activerecord (4.1.1) lib/active_record/migration.rb:377:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call'
  activesupport (4.1.1) lib/active_support/callbacks.rb:82:in `run_callbacks'
  actionpack (4.1.1) lib/action_dispatch/middleware/callbacks.rb:27:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/reloader.rb:73:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/remote_ip.rb:76:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call'
  railties (4.1.1) lib/rails/rack/logger.rb:38:in `call_app'
  railties (4.1.1) lib/rails/rack/logger.rb:20:in `block in call'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:68:in `block in tagged'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:26:in `tagged'
  activesupport (4.1.1) lib/active_support/tagged_logging.rb:68:in `tagged'
  railties (4.1.1) lib/rails/rack/logger.rb:20:in `call'
  quiet_assets (1.0.2) lib/quiet_assets.rb:18:in `call_with_quiet_assets'
  actionpack (4.1.1) lib/action_dispatch/middleware/request_id.rb:21:in `call'
  rack (1.5.2) lib/rack/methodoverride.rb:21:in `call'
  rack (1.5.2) lib/rack/runtime.rb:17:in `call'
  activesupport (4.1.1) lib/active_support/cache/strategy/local_cache_middleware.rb:26:in `call'
  rack (1.5.2) lib/rack/lock.rb:17:in `call'
  actionpack (4.1.1) lib/action_dispatch/middleware/static.rb:64:in `call'
  rack (1.5.2) lib/rack/sendfile.rb:112:in `call'
  railties (4.1.1) lib/rails/engine.rb:514:in `call'
  railties (4.1.1) lib/rails/application.rb:144:in `call'
  rack (1.5.2) lib/rack/lock.rb:17:in `call'
  rack (1.5.2) lib/rack/content_length.rb:14:in `call'
  rack (1.5.2) lib/rack/handler/webrick.rb:60:in `service'
  /home/dawid/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/httpserver.rb:138:in `service'
  /home/dawid/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/httpserver.rb:94:in `run'
  /home/dawid/.rvm/rubies/ruby-2.1.1/lib/ruby/2.1.0/webrick/server.rb:295:in `block in start_thread'


  Rendered /home/dawid/.rvm/gems/ruby-2.1.1/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/_source.erb (0.8ms)
  Rendered /home/dawid/.rvm/gems/ruby-2.1.1/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/_trace.html.erb (1.4ms)
  Rendered /home/dawid/.rvm/gems/ruby-2.1.1/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/_request_and_response.html.erb (1.2ms)
  Rendered /home/dawid/.rvm/gems/ruby-2.1.1/gems/actionpack-4.1.1/lib/action_dispatch/middleware/templates/rescues/diagnostics.erb within rescues/layout (22.6ms)
  [1m[36m (835.0ms)[0m  [1mCREATE TABLE "langs" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "name" varchar(255), "value" varchar(255), "order_type" integer, "created_at" datetime, "updated_at" datetime) [0m
  [1m[35m (18.0ms)[0m  CREATE TABLE "snippets" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "snippet" text, "lang_id" integer, "description" varchar(255), "created_at" datetime, "updated_at" datetime) 
  [1m[36m (0.2ms)[0m  [1mselect sqlite_version(*)[0m
  [1m[35m (115.5ms)[0m  CREATE  INDEX "index_snippets_on_lang_id" ON "snippets" ("lang_id")
  [1m[36m (18.5ms)[0m  [1mCREATE TABLE "users" ("id" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL, "provider" varchar(255), "uid" varchar(255), "name" varchar(255), "created_at" datetime, "updated_at" datetime) [0m
  [1m[35m (9.8ms)[0m  CREATE TABLE "schema_migrations" ("version" varchar(255) NOT NULL) 
  [1m[36m (76.5ms)[0m  [1mCREATE UNIQUE INDEX "unique_schema_migrations" ON "schema_migrations" ("version")[0m
  [1m[35m (0.2ms)[0m  SELECT version FROM "schema_migrations"
  [1m[36m (8.4ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20140517135125')[0m
  [1m[35m (12.1ms)[0m  INSERT INTO "schema_migrations" (version) VALUES ('20140318074105')
  [1m[36m (117.5ms)[0m  [1mINSERT INTO "schema_migrations" (version) VALUES ('20140316134124')[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.5ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35m (0.1ms)[0m  rollback transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.0ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.034816"], ["name", "Text (only)"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:40.034816"], ["value", "text"]]
  [1m[36m (8.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.048730"], ["name", "C"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.048730"], ["value", "c"]]
  [1m[35m (300.2ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.353464"], ["name", "C++"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.353464"], ["value", "c++"]]
  [1m[36m (61.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.421157"], ["name", "C#"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.421157"], ["value", "c#"]]
  [1m[35m (11.8ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.438401"], ["name", "CSS"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.438401"], ["value", "css"]]
  [1m[36m (8.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.450408"], ["name", "Java"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.450408"], ["value", "java"]]
  [1m[35m (11.2ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.465016"], ["name", "JavaScript"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.465016"], ["value", "js"]]
  [1m[36m (87.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.557624"], ["name", "JSON"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.557624"], ["value", "json"]]
  [1m[35m (13.0ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.576732"], ["name", "PHP"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.576732"], ["value", "php"]]
  [1m[36m (12.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.595201"], ["name", "Ruby"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.595201"], ["value", "ruby"]]
  [1m[35m (13.7ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.614305"], ["name", "SQL"], ["order_type", 2], ["updated_at", "2014-05-21 08:55:40.614305"], ["value", "sql"]]
  [1m[36m (122.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.741280"], ["name", "ActionScript"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:40.741280"], ["value", "actionscript"]]
  [1m[35m (12.6ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.760765"], ["name", "Ada"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:40.760765"], ["value", "ada"]]
  [1m[36m (9.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:40.774018"], ["name", "ANTLR"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:40.774018"], ["value", "antlr"]]
  [1m[35m (8.9ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:40.785833"], ["name", "AppleScript"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:40.785833"], ["value", "applescript"]]
  [1m[36m (483.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:41.273038"], ["name", "Assembly"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:41.273038"], ["value", "assembly"]]
  [1m[35m (787.5ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.066766"], ["name", "Asymptote"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.066766"], ["value", "asymptote"]]
  [1m[36m (12.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.085013"], ["name", "Awk"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.085013"], ["value", "awk"]]
  [1m[35m (21.7ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.109229"], ["name", "Befunge"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.109229"], ["value", "befunge"]]
  [1m[36m (6.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.118686"], ["name", "Boo"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.118686"], ["value", "boo"]]
  [1m[35m (8.6ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.130854"], ["name", "BrainFuck"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.130854"], ["value", "brainfuck"]]
  [1m[36m (11.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.144562"], ["name", "Clojure"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.144562"], ["value", "clojure"]]
  [1m[35m (115.4ms)[0m  commit transaction
  [1m[36m (0.4ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.264298"], ["name", "CoffeeScript"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.264298"], ["value", "coffeescript"]]
  [1m[36m (13.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.285940"], ["name", "ColdFusion"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.285940"], ["value", "coldfusion"]]
  [1m[35m (13.6ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.306172"], ["name", "Common Lisp"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.306172"], ["value", "common lisp"]]
  [1m[36m (128.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.441088"], ["name", "Coq"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.441088"], ["value", "coq"]]
  [1m[35m (12.6ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.460776"], ["name", "Cython"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.460776"], ["value", "cython"]]
  [1m[36m (11.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.477912"], ["name", "D"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.477912"], ["value", "d"]]
  [1m[35m (93.8ms)[0m  commit transaction
  [1m[36m (1.0ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.576016"], ["name", "Dart"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.576016"], ["value", "dart"]]
  [1m[36m (12.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.593317"], ["name", "Delphi"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.593317"], ["value", "delphi"]]
  [1m[35m (10.9ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.609034"], ["name", "DTD"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.609034"], ["value", "dtd"]]
  [1m[36m (104.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.720901"], ["name", "Dylan"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.720901"], ["value", "dylan"]]
  [1m[35m (14.6ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.741559"], ["name", "Erlang"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.741559"], ["value", "erlang"]]
  [1m[36m (194.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:42.941731"], ["name", "Factor"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.941731"], ["value", "factor"]]
  [1m[35m (11.8ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:42.958747"], ["name", "Fancy"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:42.958747"], ["value", "fancy"]]
  [1m[36m (48.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.010759"], ["name", "Fortran"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.010759"], ["value", "fortran"]]
  [1m[35m (8.5ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.023529"], ["name", "F#"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.023529"], ["value", "fsharp"]]
  [1m[36m (9.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.036736"], ["name", "Gherkin"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.036736"], ["value", "cucumber"]]
  [1m[35m (7.6ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.046696"], ["name", "Groovy"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.046696"], ["value", "groovy"]]
  [1m[36m (5.4ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.053736"], ["name", "Haskell"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.053736"], ["value", "haskell"]]
  [1m[35m (88.7ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.145812"], ["name", "HTML"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.145812"], ["value", "html"]]
  [1m[36m (13.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.164515"], ["name", "IDL"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.164515"], ["value", "idl"]]
  [1m[35m (7.3ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.175682"], ["name", "Io"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.175682"], ["value", "io"]]
  [1m[36m (118.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.298420"], ["name", "LLVM"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.298420"], ["value", "llvm"]]
  [1m[35m (12.7ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.317769"], ["name", "Logtalk"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.317769"], ["value", "logtalk"]]
  [1m[36m (13.4ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.338898"], ["name", "Lua"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.338898"], ["value", "lua"]]
  [1m[35m (73.5ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.419629"], ["name", "Matlab"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.419629"], ["value", "matlab"]]
  [1m[36m (87.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.514331"], ["name", "MiniD"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.514331"], ["value", "minid"]]
  [1m[35m (12.3ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.533211"], ["name", "Modelica"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.533211"], ["value", "modelica"]]
  [1m[36m (15.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.554107"], ["name", "Modula-2"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.554107"], ["value", "modula2"]]
  [1m[35m (8.5ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.566282"], ["name", "MuPad"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.566282"], ["value", "mupad"]]
  [1m[36m (95.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.666165"], ["name", "MySQL"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.666165"], ["value", "mysql"]]
  [1m[35m (10.4ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:43.680686"], ["name", "Nemerle"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.680686"], ["value", "nemerle"]]
  [1m[36m (10.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:43.695574"], ["name", "Nimrod"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:43.695574"], ["value", "nimrod"]]
  [1m[35m (305.6ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.005891"], ["name", "Objective-C"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.005891"], ["value", "objective-c"]]
  [1m[36m (22.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.036286"], ["name", "Objective-J"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.036286"], ["value", "objective-j"]]
  [1m[35m (7.8ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.047365"], ["name", "Octave"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.047365"], ["value", "octave"]]
  [1m[36m (10.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.060841"], ["name", "OCaml"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.060841"], ["value", "ocaml"]]
  [1m[35m (6.1ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.069600"], ["name", "Perl"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.069600"], ["value", "perl"]]
  [1m[36m (6.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.077391"], ["name", "PovRay"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.077391"], ["value", "povray"]]
  [1m[35m (62.0ms)[0m  commit transaction
  [1m[36m (0.4ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.143166"], ["name", "PostScript"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.143166"], ["value", "postscript"]]
  [1m[36m (11.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.160032"], ["name", "PowerShell"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.160032"], ["value", "powershell"]]
  [1m[35m (149.5ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.8ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.313973"], ["name", "Prolog"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.313973"], ["value", "prolog"]]
  [1m[36m (13.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.334827"], ["name", "Python"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.334827"], ["value", "python"]]
  [1m[35m (9.1ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.347507"], ["name", "Rebol"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.347507"], ["value", "rebol"]]
  [1m[36m (10.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.361109"], ["name", "Redcode"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.361109"], ["value", "redcode"]]
  [1m[35m (6.4ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.369981"], ["name", "Rust"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.369981"], ["value", "rust"]]
  [1m[36m (42.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.414042"], ["name", "S"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.414042"], ["value", "s"]]
  [1m[35m (444.3ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.861745"], ["name", "S-Plus"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.861745"], ["value", "splus"]]
  [1m[36m (13.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.881949"], ["name", "R"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.881949"], ["value", "r"]]
  [1m[35m (74.9ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:44.964708"], ["name", "Scala"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.964708"], ["value", "scala"]]
  [1m[36m (13.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:44.984476"], ["name", "Scheme"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:44.984476"], ["value", "scheme"]]
  [1m[35m (12.8ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.004575"], ["name", "Scilab"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.004575"], ["value", "scilab"]]
  [1m[36m (14.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.024628"], ["name", "Smalltalk"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.024628"], ["value", "smalltalk"]]
  [1m[35m (103.7ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.133500"], ["name", "SNOBOL"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.133500"], ["value", "snobol"]]
  [1m[36m (12.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (1.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.151802"], ["name", "Tcl"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.151802"], ["value", "tcl"]]
  [1m[35m (11.6ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.169357"], ["name", "TeX"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.169357"], ["value", "tex"]]
  [1m[36m (8.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.182043"], ["name", "Vala"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.182043"], ["value", "vala"]]
  [1m[35m (71.8ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.257742"], ["name", "Verilog"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.257742"], ["value", "verilog"]]
  [1m[36m (11.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.0ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.274396"], ["name", "VHDL"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.274396"], ["value", "vhdl"]]
  [1m[35m (10.8ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.289595"], ["name", "Visual Basic.NET"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.289595"], ["value", "vb.net"]]
  [1m[36m (322.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.617599"], ["name", "XML"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.617599"], ["value", "xml"]]
  [1m[35m (69.3ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.693918"], ["name", "XSLT"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.693918"], ["value", "xslt"]]
  [1m[36m (12.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.713651"], ["name", "XQuery"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.713651"], ["value", "xquery"]]
  [1m[35m (8.6ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.725877"], ["name", "YAML"], ["order_type", 3], ["updated_at", "2014-05-21 08:55:45.725877"], ["value", "yaml"]]
  [1m[36m (9.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.737996"], ["name", "AutoHotkey"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.737996"], ["value", "autohotkey"]]
  [1m[35m (82.0ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.825292"], ["name", "Agda"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.825292"], ["value", "agda"]]
  [1m[36m (12.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.845410"], ["name", "ApacheConf"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.845410"], ["value", "apacheconf"]]
  [1m[35m (13.9ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.864777"], ["name", "AutoIT"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.864777"], ["value", "autoit"]]
  [1m[36m (8.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.876733"], ["name", "BBCode"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.876733"], ["value", "bbcode"]]
  [1m[35m (81.2ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.963127"], ["name", "Batchfile"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.963127"], ["value", "batchfile"]]
  [1m[36m (13.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:45.983734"], ["name", "BlitzBasic"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.983734"], ["value", "blitzbasic"]]
  [1m[35m (8.9ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:45.995193"], ["name", "BlitzMax"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:45.995193"], ["value", "blitzmax"]]
  [1m[36m (8.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.006629"], ["name", "Cobol"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.006629"], ["value", "cobol"]]
  [1m[35m (336.5ms)[0m  commit transaction
  [1m[36m (1.6ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.348395"], ["name", "CobolFree"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.348395"], ["value", "cobolfree"]]
  [1m[36m (12.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.368648"], ["name", "CSS+Django/Jinja"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.368648"], ["value", "css+django"]]
  [1m[35m (9.4ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.383487"], ["name", "CSS+Mako"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.383487"], ["value", "css+mako"]]
  [1m[36m (57.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.445210"], ["name", "CSS+Myghty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.445210"], ["value", "css+myghty"]]
  [1m[35m (100.0ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.552542"], ["name", "CSS+PHP"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.552542"], ["value", "css+php"]]
  [1m[36m (12.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.571569"], ["name", "CSS+Ruby"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.571569"], ["value", "css+ruby"]]
  [1m[35m (12.8ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.589543"], ["name", "CSS+Smarty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.589543"], ["value", "css+smarty"]]
  [1m[36m (9.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.603593"], ["name", "Cuda"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.603593"], ["value", "cuda"]]
  [1m[35m (118.6ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.726656"], ["name", "Ceylon"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.726656"], ["value", "ceylon"]]
  [1m[36m (13.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.746784"], ["name", "Cheetah"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.746784"], ["value", "cheetah"]]
  [1m[35m (13.2ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.764910"], ["name", "Clay"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.764910"], ["value", "clay"]]
  [1m[36m (7.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.8ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:46.775566"], ["name", "diff"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.775566"], ["value", "diff"]]
  [1m[35m (114.5ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:46.894298"], ["name", "erb"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:46.894298"], ["value", "erb"]]
  [1m[36m (208.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.110416"], ["name", "HTML+Cheetah"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.110416"], ["value", "html+cheetah"]]
  [1m[35m (15.0ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.131379"], ["name", "HTML+Django/Jinja"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.131379"], ["value", "html+django"]]
  [1m[36m (12.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.150706"], ["name", "HTML+Evoque"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.150706"], ["value", "html+evoque"]]
  [1m[35m (102.4ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.258323"], ["name", "HTML+Genshi"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.258323"], ["value", "html+genshi"]]
  [1m[36m (109.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.372123"], ["name", "HTML+Lasso"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.372123"], ["value", "html+lasso"]]
  [1m[35m (11.0ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.388304"], ["name", "HTML+Mako"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.388304"], ["value", "html+mako"]]
  [1m[36m (77.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.472852"], ["name", "HTML+Myghty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.472852"], ["value", "html+myghty"]]
  [1m[35m (10.7ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.489223"], ["name", "HTML+PHP"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.489223"], ["value", "html+php"]]
  [1m[36m (9.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.501462"], ["name", "HTML+Smarty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.501462"], ["value", "html+smarty"]]
  [1m[35m (14.0ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.517873"], ["name", "HTML+Velocity"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.517873"], ["value", "html+velocity"]]
  [1m[36m (93.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (1.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.615075"], ["name", "HTTP"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.615075"], ["value", "http"]]
  [1m[35m (13.1ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.634803"], ["name", "JavaScript+Cheetah"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.634803"], ["value", "js+cheetah"]]
  [1m[36m (10.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.649196"], ["name", "JavaScript+Django/Jinja"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.649196"], ["value", "js+django"]]
  [1m[35m (285.0ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.938258"], ["name", "JavaScript+Lasso"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.938258"], ["value", "js+lasso"]]
  [1m[36m (8.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.952903"], ["name", "JavaScript+Mako"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.952903"], ["value", "js+mako"]]
  [1m[35m (9.8ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:47.967265"], ["name", "JavaScript+Myghty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.967265"], ["value", "js+myghty"]]
  [1m[36m (8.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:47.978584"], ["name", "JavaScript+PHP"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:47.978584"], ["value", "js+php"]]
  [1m[35m (89.9ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.072308"], ["name", "JavaScript+Ruby"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.072308"], ["value", "js+ruby"]]
  [1m[36m (12.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (1.1ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.091389"], ["name", "JavaScript+Smarty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.091389"], ["value", "js+smarty"]]
  [1m[35m (14.3ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.112758"], ["name", "Objective-C++"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.112758"], ["value", "objective-c++"]]
  [1m[36m (7.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.123482"], ["name", "pl/pgsql"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.123482"], ["value", "plpgsql"]]
  [1m[35m (94.9ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.225174"], ["name", "Rconsole"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.225174"], ["value", "rconsole"]]
  [1m[36m (10.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.240964"], ["name", "SCSS"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.240964"], ["value", "scss"]]
  [1m[35m (9.2ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.253094"], ["name", "SASS"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.253094"], ["value", "sass"]]
  [1m[36m (11.3ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.268522"], ["name", "Smarty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.268522"], ["value", "smarty"]]
  [1m[35m (6.4ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.2ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.277407"], ["name", "XML+Cheetah"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.277407"], ["value", "xml+cheetah"]]
  [1m[36m (241.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.6ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.523135"], ["name", "XML+Django/Jinja"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.523135"], ["value", "xml+django"]]
  [1m[35m (16.7ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.548347"], ["name", "XML+Evoque"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.548347"], ["value", "xml+evoque"]]
  [1m[36m (8.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.2ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.574262"], ["name", "XML+Lasso"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.574262"], ["value", "xml+lasso"]]
  [1m[35m (139.9ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.718354"], ["name", "XML+Mako"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.718354"], ["value", "xml+mako"]]
  [1m[36m (12.4ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.738662"], ["name", "XML+Myghty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.738662"], ["value", "xml+myghty"]]
  [1m[35m (9.6ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.753683"], ["name", "XML+PHP"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.753683"], ["value", "xml+php"]]
  [1m[36m (9.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.766235"], ["name", "XML+Ruby"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.766235"], ["value", "xml+ruby"]]
  [1m[35m (97.7ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.868669"], ["name", "XML+Smarty"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.868669"], ["value", "xml+smarty"]]
  [1m[36m (15.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "langs" ("created_at", "name", "order_type", "updated_at", "value") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:48.891094"], ["name", "XML+Velocity"], ["order_type", 4], ["updated_at", "2014-05-21 08:55:48.891094"], ["value", "xml+velocity"]]
  [1m[35m (7.2ms)[0m  commit transaction
  [1m[36mLang Load (0.3ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1[0m
  [1m[35mLang Load (0.4ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'JavaScript' LIMIT 1[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'SQL' LIMIT 1[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.3ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PowerShell' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'XML' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'JavaScript' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'SQL' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PowerShell' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'XML' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'JavaScript' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'SQL' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36mLang Load (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PHP' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'PowerShell' LIMIT 1[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'Java' LIMIT 1
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'XML' LIMIT 1[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."name" = 'C' LIMIT 1
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:48.948459"], ["description", "Simple hello world in C"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n\nint main() {\n    printf(\"Hello World!\")\n\n    return 0;\n}"], ["updated_at", "2014-05-21 08:55:48.948459"]]
  [1m[36m (47.6ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.001092"], ["description", "PHPInfo snippet"], ["lang_id", 9], ["snippet", "<?php\n    phpinfo();\n?>"], ["updated_at", "2014-05-21 08:55:49.001092"]]
  [1m[35m (13.2ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.023178"], ["description", "DOM Depth"], ["lang_id", 7], ["snippet", "var documentRoot = $(document.documentElement); // $('html')\n\n$(document).ready(function() {\n    console.log(treeDepth(documentRoot, {elem: documentRoot, depth: 0}));\n});\n\nfunction treeDepth(elem, current) {\n    var deepestElem = current;\n\n    $(elem).each(function() {\n        var elemContents = this.children;\n\n        if (elemContents) {\n            for (var i = 0; i < elemContents.length; i++) {\n                var tempElem = treeDepth(elemContents[i], {elem: elemContents[i], depth: current.depth + 1});\n\n                if (tempElem.depth > deepestElem.depth) {\n                    deepestElem = tempElem;\n                }\n            }\n        }\n    })\n\n    return deepestElem;\n}"], ["updated_at", "2014-05-21 08:55:49.023178"]]
  [1m[36m (197.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.228163"], ["description", "Dynamic programming - LCS Algorithm (recursive version)"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define INF -1\n#define SIZE 32\n#define LENGTH 256\n\n/* definiowane typy zmiennych */\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\n/* zmienne globalne */\nstring R[SIZE]; // tablica z LCS\nint counter = 0; // licznik LCS\n\n/* znajdowanie najwiekszej wartosci */\nint max(int a, int b) {\n    return (a > b)? a : b; // TRUE : FALSE\n}\n\n/* wyswietlanie tabeli LCS */\nvoid CheckLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)]) {\n\tint i, j;\n\n\tprintf(\"  \");\n\tfor (j=0; j<strlen(string2); j++)\n\t\tprintf(\" %2c\", string2[j]);\n\tprintf(\"\\n\");\n\n\tfor (i=0; i<strlen(string1); i++) {\n\t\tfor (j=0; j<strlen(string2); j++) {\n\t\t\tif (j == 0)\n\t\t\t\tprintf(\"%2c\", string1[i]);\n\t\t\tif (C[i][j] == INF)\n\t\t\t\tprintf(\" %2c\", 510); // 0x0000221E\n\t\t\telse\n\t\t\t\tprintf(\" %2c\", C[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\n// wypisz najdluzszy podciag //\nvoid PrintLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (i == 0 || j == 0) return;\n\tif (string1[i] == string2[j]) {\n\t\tPrintLCS(string1, string2, C, i-1, j-1);\n\t\tprintf(\"%c\", string1[i]);\n\t}\n\telse if (C[i-1][j] >= C[i][j-1]) // '|'\n\t\tPrintLCS(string1, string2, C, i-1, j);\n\telse if (C[i-1][j] < C[i][j-1]) // '-'\n\t\tPrintLCS(string1, string2, C, i, j-1);\n}\n\n/* wypelnianie tabeli LCS */\nint LCSLookup(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (C[i][j] != INF) return C[i][j]; // jesli wartosc w tablicy != oo (nieskonczonosc)\n\tif (string1[i] == string2[j]) // jesli znaki sa takie same\n\t\tC[i][j] = LCSLookup(string1, string2, C, i-1, j-1) + 1;\n\telse { // w przeciwnym wypadku wybierz wartosc maksymalna\n\t\tC[i][j] = max(LCSLookup(string1, string2, C, i-1, j), LCSLookup(string1, string2, C, i, j-1));\n\t}\n\n\treturn C[i][j];\n}\n\n/* glowna funkcja LCS (rekursywna) */\nvoid LCSRec(string string1, string string2) {\n\tint length1 = strlen(string1), length2 = strlen(string2);\n\tint C[length1][length2]; // tablica wypelniona liczbami\n\tint i, j;\n\n\t// NWP ciagu dowolnej dlugosci oraz ciagu pustego == 0 //\n\tfor (i=0; i<length1; i++)\n\t\tC[i][0] = '0';\n\tfor (j=1; j<length2; j++) // j=1, poniewaz dla tab[0][0] juz ustalilismy wartosc = 0\n\t\tC[0][j] = '0';\n\n\tfor (i=1; i<length1; i++)\n\t\tfor (j=1; j<length2; j++)\n\t\t\tC[i][j] = INF;\n\n\tLCSLookup(string1, string2, C, length1-1, length2-1);\n\n\tsystem(\"cls\");\n\tCheckLCS(string1, string2, C);\n\tprintf(\"\\nNajdluzszy wspolny podciag:\\n\");\n\tPrintLCS(string1, string2, C, length1-1, length2-1);\n\tputs(\"\\n\");\n\treturn;\n}\n\n\nint main() {\n\tstring string1 = malloc(LENGTH * sizeof(string));\n\tstring string2 = malloc(LENGTH * sizeof(string));\n\n\tprintf(\"Podaj kolejno 2 ciagi (slowa), dla ktorych chcesz wyznaczyc ich najdluzsze\\nwspolne podciagi. Ciagi oddziel za pomoca klawisza spacja/enter:\\n\");\n\tstrcpy(string1, \".\");\n\tstrcpy(string2, \".\");\n\tscanf(\"%s %s\", string1+1, string2+1);\n\n\tLCSRec(string1, string2);\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:49.228163"]]
  [1m[35m (13.6ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.249654"], ["description", "SQL Inner Join example"], ["lang_id", 11], ["snippet", "SELECT p.name, i.name FROM player p\n  INNER JOIN player_has_item pi ON pi.id_player = p.id\n  INNER JOIN item i ON pi.id_item = i.id;"], ["updated_at", "2014-05-21 08:55:49.249654"]]
  [1m[36m (64.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.320426"], ["description", "B-Tree snippet"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n\n#define T 3 // stopien B-drzewa (min. ilosc kluczy to t-1, max. 2t-1, ilosc wskaznikow 2t)\n\ntypedef enum {FALSE, TRUE} boolean;\ntypedef enum {ROOT, NODE} nodeType;\ntypedef struct {\n\tshort n;        // ilosc kluczy (-1 -> wezel usuniety)\n\tint k[2*T-1];   // klucze\n\tint c[2*T];     // wskazniki do synow (pozycje w pliku: 0,1,2 ...) (c[0] = -1 == aktualny wezel to lisc)\n} Node;\nint nodeSize = sizeof(Node); // rozmiar wezla w bajtach\nFILE *treeFile;  // plik drzewa (zawierajacy wezly)\n// FILE *stackFile; // plik stosu (zawierajacy wolne pozycje)\nint rootPos = -1; // pozycja korzenia\nint nextPos = 0; // nastepna wolna pozycja // ew. zapisywanie info. do pliku o nastepnej wolnej pozycji\n\nint getNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\treturn (ftell(treeFile)-sizeof(int))/nodeSize; // zwraca pozycje wezla\n}\n\nint saveNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfwrite(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nint readNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfread(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nvoid saveRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfwrite(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\nvoid readRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfread(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\n/* restrukturyzacja (rozbijanie wezla) */\nvoid nodeSplit(Node mainNode, Node childNode, int i, nodeType nType, int mainPos, int childPos) {\n\tNode anotherNode;\n\tint j;\n\t\n\tif (childNode.c[0] == -1)\n\t\tanotherNode.c[0] = childNode.c[0];\n\tanotherNode.n = T-1;\n\t\n\tfor (j=0; j<T-1; j++)\n\t\tanotherNode.k[j] = childNode.k[j+T];\n\t\n\tif (childNode.c[0] != -1)\n\t\tfor (j=0; j<T; j++)\n\t\t\tanotherNode.c[j] = childNode.c[j+T];\n\t\t\t\n\tchildNode.n = T-1;\n\t\n\tfor (j=mainNode.n; j>i; j--)\n\t\tmainNode.k[j] = mainNode.k[j-1];\n\t\t\n\tmainNode.k[i] = childNode.k[T-1];\n\t\n\tfor (j=mainNode.n+1; j>i+1; j--)\n\t\tmainNode.c[j] = mainNode.c[j-1];\n\t\n\tmainNode.n++;\n\n\tsaveNode(childPos, &childNode);\n\tsaveNode(nextPos, &anotherNode);\n\tmainNode.c[i+1] = nextPos++;\n\t\n\tif (nType == ROOT)\n\t\tsaveNode(nextPos, &mainNode); // nowy korzen\n\telse if (nType == NODE)\n\t\tsaveNode(mainPos, &mainNode);\n}\n\nvoid insertValue(Node node, int nodePos, int value) {\n\tint i = 0;\n\t\n\tif (node.c[0] == -1) { // lisc\n\t\ti = node.n;\n\t\twhile (i >= 1 && value < node.k[i-1]) {\n\t\t\tnode.k[i] = node.k[i-1];\n\t\t\ti--;\n\t\t}\n\t\tnode.k[i] = value;\n\t\tnode.n++;\n\t\tsaveNode(nodePos, &node);\n\t}\n\telse { // wezel wewn.\n\t\tNode temp;\n\t\tint tempPos;\n\t\tfor (i=0; i<node.n; i++) // szukanie miejsca na wezel miedzy kluczami (przejscie do syna)\n\t\t\tif (value < node.k[i])\n\t\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (value >= node.k[i-1])\n\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (temp.n == 2*T-1) { // czy wezel-syn jest pelny?\n\t\t\tnodeSplit(node, temp, i, NODE, nodePos, tempPos);\n\t\t\treadNode(nodePos, &node);\n\t\t\tinsertValue(node, nodePos, value);\n\t\t\treturn;\n\t\t}\n\t\tinsertValue(temp, tempPos, value);\n\t}\n}\n\nvoid insert(int value) {\n\tNode root;\n\n\tif (rootPos == -1) { // drzewo puste -> tworzenie korzenia\n\t\troot.n = 1; root.k[0] = value; root.c[0] = -1;\n\t\trootPos = saveNode(0, &root);\n\t\tnextPos = rootPos + 1;\n\t\tsaveRoot();\n\t}\n\telse { // drzewo niepuste\n\t\treadNode(rootPos, &root);\n\t\tif (root.n == 2*T-1) { // czy korzen jest pelny?\n\t\t\tNode newRoot;\n\t\t\tnewRoot.n = 0;\n\t\t\tnewRoot.c[0] = rootPos;\n\t\t\tnodeSplit(newRoot, root, 0, ROOT, 0, rootPos);\n\t\t\trootPos = nextPos++;\n\t\t\tsaveRoot();\n\t\t\treadNode(rootPos, &root);\n\t\t}\n\t\tinsertValue(root, rootPos, value);\n\t}\n}\n\nvoid drukujB(int r, int p) {\n\t// drukuje B-drzewo o korzeniu r (pozycja w pliku)\n\t// wydruk przesuniety o p w prawo\n\tNode w;\n\tint i, j;\n\treadNode(r,&w);\n\tif (w.c[0] == -1) {\n\t\tfor (i=0;i<p;i++)\n\t\t\tprintf(\" \");\n\t\tfor (i=0;i<w.n;i++)\n\t\t\tprintf(\"%d \",w.k[i]);\n\t\tprintf(\"\\n\");\n\t} \n\telse {\n\t\tdrukujB(w.c[w.n],p+4);\n\t\tfor (i=w.n-1;i>=0;i--){\n\t\t\tfor (j=0;j<p;j++)\n\t\t\t\tprintf(\" \");\n\t\t\tprintf(\"%d\\n\",w.k[i]);\n\t\t\tdrukujB(w.c[i],p+4);\n\t\t}\n\t}\n}\n\n/* testowe wypisywanie danych z pliku */\nvoid printFile() {\n\tint i, j;\n\tNode temp;\n\t\n\treadRoot();\n\tprintf(\"rootPos: %i\\n\\n\", rootPos);\n\tfor (i=0; i<nextPos; i++) {\n\t\treadNode(i, &temp);\n\t\tprintf(\"__Node #%i of pos__\\n\", i);\n\t\tprintf(\"node.n: %i\\n\", temp.n);\n\t\tfor (j=0; j<2*T-1; j++)\n\t\t\tprintf(\"node.k[%i]: %i\\n\", j, temp.k[j]);\n\t\tfor (j=0; j<2*T; j++)\n\t\t\tprintf(\"node.c[%i]: %i\\n\", j, temp.c[j]);\n\t\tputs(\"\");\n\t}\n}\n\nint main() {\n\tint menu, value;\n\ttreeFile = fopen(\"b-tree.bt\", \"w+\");\n\t\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Dopisz nowa wartosc do drzewa\\n\");\n\t\tprintf(\"\\t3 - Wyswietl drzewo\\n\");\n\t\tprintf(\"\\t[TEST] 4 - Wyswietl dane z pliku\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &menu);\n\t\t\n\t\tswitch (menu) {\n\t\t\tcase 1:\n\t\t\t\tprintf(\"Podaj wartosc, ktora chcesz wprowadzic do drzewa: \");\n\t\t\t\tscanf(\"%i\", &value);\n\t\t\t\tinsert(value);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdrukujB(rootPos, 0);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintFile();\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tprintf(\"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfclose(treeFile);\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:49.320426"]]
  [1m[35m (11.5ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.0ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.336703"], ["description", "EncryptUtils"], ["lang_id", 6], ["snippet", "import sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\n\npublic class EncryptUtils {\n    public static final String DEFAULT_ENCODING=\"UTF-8\";\n    static BASE64Encoder enc=new BASE64Encoder();\n    static BASE64Decoder dec=new BASE64Decoder();\n\n    public static String base64encode(String text) {\n        try {\n            String rez = enc.encode(text.getBytes(DEFAULT_ENCODING));\n            return rez;\n        }\n        catch (UnsupportedEncodingException e) {\n            return null;\n        }\n    }\n\n    public static String base64decode(String text){\n\n        try {\n            return new String(dec.decodeBuffer( text ),DEFAULT_ENCODING);\n        }\n        catch (IOException e) {\n            return null;\n        }\n\n    }\n\n    public static String xorMessage(String message, String key) {\n        try {\n            if (message==null || key==null) return null;\n\n            char[] keys=key.toCharArray();\n            char[] mesg=message.toCharArray();\n\n            int ml=mesg.length;\n            int kl=keys.length;\n            char[] newmsg=new char[ml];\n\n            for (int i=0; i<ml; i++) {\n                newmsg[i]=(char)(mesg[i]^keys[i%kl]);\n            }\n            mesg=null; keys=null;\n            return new String(newmsg);\n        }\n        catch (Exception e) {\n            return null;\n        }\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:49.336703"]]
  [1m[36m (10.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.0ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.351888"], ["description", "Connect singleton"], ["lang_id", 9], ["snippet", "<?php\n\nclass DBConnect {\n    protected static $connection;\n\n    private $dbms;\n    private $host;\n    private $db;\n    private $user;\n    private $password;\n\n    private $globals = array();\n\n    public function __construct($dbms, $host, $db, $user, $password) {\n        $this->dbms = $dbms;\n        $this->host = $host;\n        $this->db = $db;\n        $this->user = $user;\n        $this->password = $password;\n\n        $this->getConnection();\n    }\n\n    public function getConnection() {\n        if (!self::$connection) {\n            try {\n                self::$connection = new PDO($this->dbms . ':host=' . $this->host . ';dbname=' . $this->db, $this->user, $this->password);\n                self::$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n                if ($this->dbms == 'mysql')\n                    self::$connection->query('SET NAMES utf8');\n            } catch (PDOException $e) {\n                global $GLOBALS; // not necessary\n                $GLOBALS['db_error_bold'] = 'Database error: ';\n                $GLOBALS['db_error'] = 'Couldn\\'t connect to database';\n\n                return -1;\n            }\n        }\n\n        return self::$connection;\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:49.351888"]]
  [1m[35m (101.0ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.7ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.458068"], ["description", "Fibbonaci recursive_function in Shell"], ["lang_id", 62], ["snippet", "#!/bin/bash\n\nfibbo=0;\ntemp=0;\nfor i in 'seq 0..20'; do\n\techo -n \"$fibbo\"\n\tif [ $i = 1]; then\n\t\t$((fibbo)) = 1\n\telif [ $i -gt 1]; then\n\t\t$((fibbo)) =\n\tfi\ndone"], ["updated_at", "2014-05-21 08:55:49.458068"]]
  [1m[36m (101.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (0.7ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.567514"], ["description", "Polynomial class"], ["lang_id", 6], ["snippet", "package mo.calc;\n\nimport java.util.List;\n\nimport org.paukov.combinatorics.Factory;\nimport org.paukov.combinatorics.Generator;\nimport org.paukov.combinatorics.ICombinatoricsVector;\n\npublic class Polynomial { // Interpolating Newton's method\n\tprivate Node node;\n\tprivate double[] b;\n\tprivate double[] W; // polynomial\n\n\tpublic Polynomial(Node node) {\n\t\tif (!node.isEmpty()) {\n\t\t\tthis.node = node;\n\t\t\tb = new double[node.getSize()];\n\t\t\tW = new double[node.getSize()];\n\t\t}\n\t\telse\n\t\t\tSystem.err.println(\"Error in [\" + this.getClass().getSimpleName() +\"]Constructor: Node is null!\");\n\t}\n\n\t/**\n\t * <b>Initial calculation</b>\n\t * Calculates <b>b</b>[] and <b>W</b>[] coefficients\n\t */\n\tpublic void init() {\n\t\tcalculateB();\n\t\tcalculateCoeffs();\n\t}\n\n\t/**\n\t * Set <b>x</b> into polynomial and calculate it\n\t */\n\tpublic double calculatePolynomial(Integer x) {\n\t\tdouble P = W[0]; // P = 0?\n\n\t\tif (W.length > 0)\n\t\t\tfor (int i = 1; i < W.length; i++)\n\t\t\t\tP += W[i]*Math.pow(x, i);\n\n\t\treturn P;\n\t}\n\n\t/**\n\t * Extends Node(x[], y[]) by adding new Node(<b>x</b>, <b>y</b>) and calculate it\n\t */\n\tpublic void extendNCalculate(Integer x, Integer y) {\n\t\tnode.extend(x, y);\n\t\tdouble[] tempB = new double[b.length + 1];\n\t\tdouble[] tempW = new double[W.length + 1];\n\t\tSystem.arraycopy(b, 0, tempB, 0, b.length);\n\t\tSystem.arraycopy(W, 0, tempW, 0, W.length);\n\t\tb = tempB;\n\t\tW = tempW;\n\n\t\tb[b.length - 1] = (node.getY(node.getSize() - 1) - calculatePolynomial(node.getX(node.getSize() - 1))) / calcProduct(node.getSize() - 1, node.getSize() - 2);\n\t\tcalculateCoeffs();\n\t}\n\n\tpublic void printPolynomial() {\n\t\tString s = \"P(x) = \" + W[0];\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printB() {\n\t\tString s = \"b[] = {\";\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \", \");\n\t\ts = s.concat(b[b.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printCoeffs() {\n\t\tString s = \"W[] = {\";\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \", \");\n\t\ts = s.concat(W[W.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic String getTex() {\n\t\tString s = \"\\\\\\\\x[\\\\medspace] = [\";\n\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getX(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getX(b.length - 1) + \"]\\\\\\\\y[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getY(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getY(b.length - 1) + \"]\\\\\\\\b[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \",\\\\medspace\");\n\t\ts = s.concat(b[b.length - 1] + \"]\\\\\\\\W[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \",\\\\medspace\");\n\t\ts = s.concat(W[W.length - 1] + \"]\\\\\\\\P(x) = \" + W[0]);\n\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * Calculates <b>b</b>[]\n\t */\n\tprivate void calculateB() {\n\t\tfor (int i = 0; i < b.length; i++)\n\t\t\tb[i] = (node.getY(i) - calcSeries(i, i-1)) / calcProduct(i, i-1);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[] coefficients\n\t */\n\tprivate void calculateCoeffs() {\n\t\tfor (int i = 0; i < W.length; i++)\n\t\t\tW[i] = calcCoeff(i, W.length - 1);\n\t}\n\n\t/**\n\t * Summing => b0 + b1(xi - x0) + ...\n\t */\n\tprivate double calcSeries(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn (b[i] * calcProduct(iAtX, i-1)) + calcSeries(iAtX, --i);\n\t}\n\n\t/**\n\t * Multiplying => (xi - x0)(xi - x1)(xi - x2)...\n\t */\n\tprivate double calcProduct(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn (node.getX(iAtX) - node.getX(i)) * calcProduct(iAtX, --i);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[<b>i</b>]<br>\n\t * <b>i</b> is index\n\t */\n\tprivate double calcCoeff(int degree, int i) {\n\t\tif (degree == i)\n\t\t\treturn b[i];\n\t\telse\n\t\t\treturn b[i] * calcBrackets(degree, i-1) + calcCoeff(degree, --i);\n\t}\n\n\t/**\n\t * eg. (x2 - x1) + (x2 - x1) + (x1 - x0)\n\t */\n\tprivate int calcBrackets(int degree, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse if (degree == 0)\n\t\t\treturn -node.getX(i) * calcBrackets(degree, --i);\n\t\telse\n\t\t\treturn calcSumOfProducts(degree, i+1);\n\t}\n\n\t/**\n\t * Extension of method <b>calcBracets</b>\n\t */\n\tprivate int calcSumOfProducts(int degree, int i) {\n\t\tICombinatoricsVector<Integer> vector = Factory.createVector(node.getXElements(i));\n\t\tGenerator<Integer> generator = Factory.createSimpleCombinationGenerator(vector, i - degree);\n\t\tList<ICombinatoricsVector<Integer>> temp = generator.generateAllObjects();\n\n\t\tint sum = 0;\n\t\tfor (int m = 0; m < temp.size(); m++) {\n\t\t\tint mul = 1;\n\t\t\tfor (int n = 0; n < temp.get(m).getSize(); n++) {\n\t\t\t\tmul *= -temp.get(m).getValue(n);\n\t\t\t}\n\t\t\tsum += mul;\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n"], ["updated_at", "2014-05-21 08:55:49.567514"]]
  [1m[35m (14.6ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.588083"], ["description", "Imported DB Schema"], ["lang_id", 82], ["snippet", "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n\n  <xs:import schemaLocation=\"definedTypes.xsd\" namespace=\"http://www.w3.org/2001/XMLSchema\"/>\n\n  <xs:complexType name=\"blocked_until\">\n    <xs:all minOccurs=\"0\">\n      <xs:element name=\"date\" type=\"date\"/>\n      <xs:element name=\"time\" type=\"time\"/>\n    </xs:all>\n    <xs:attribute name=\"active\" type=\"boolean\" default=\"false\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"account\">\n    <xs:sequence>\n      <xs:element name=\"login\" type=\"loginST\"/>\n      <xs:element name=\"password\" type=\"password\"/>\n      <xs:element name=\"rest_access\" type=\"rest_accessST\" default=\"Player\"/>\n      <xs:element name=\"email\" type=\"emailST\"/>\n      <xs:element name=\"recovery_key\" type=\"recovery_key\"/>\n      <xs:element name=\"creation_date\" type=\"date\"/>\n      <xs:element name=\"creation_time\" type=\"time\"/>\n      <xs:element name=\"warn_level\" type=\"warn_level\"/>\n      <xs:element name=\"blocked_until\" type=\"blocked_until\"/>\n      <xs:element name=\"last_ip\" type=\"ipST\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"skills\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"skill\" type=\"skill\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"items\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"item\" type=\"item\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"character\">\n    <xs:sequence>\n      <xs:element name=\"health\" type=\"integer\"/>\n      <xs:element name=\"max_health\" type=\"integer\"/>\n      <xs:choice>\n        <xs:element name=\"mana\" type=\"integer\"/>\n        <xs:element name=\"rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:choice>\n        <xs:element name=\"max_mana\" type=\"integer\"/>\n        <xs:element name=\"max_rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:element name=\"level\" type=\"integer\"/>\n      <xs:element name=\"experience\" type=\"integer\"/>\n      <xs:element name=\"strength\" type=\"integer\"/>\n      <xs:element name=\"agility\" type=\"integer\"/>\n      <xs:element name=\"intelligence\" type=\"integer\"/>\n      <xs:element name=\"skills\" type=\"skills\"/>\n      <xs:element name=\"equipped\" type=\"items\"/>\n      <xs:element name=\"items\" type=\"items\"/>\n      <xs:element name=\"skins\" type=\"value_list\"/>\n      <xs:element name=\"skin_id\" type=\"unique_id\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n    <xs:attribute name=\"class\" type=\"classST\"/>\n    <xs:attribute name=\"gender\" type=\"genderST\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"character_list\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"character\" type=\"character\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:element name=\"account_info\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"account\" type=\"account\"/>\n        <xs:element name=\"character_list\" type=\"character_list\"/>\n      </xs:sequence>\n      <xs:attribute name=\"exported\" type=\"boolean\" fixed=\"true\"/>\n    </xs:complexType>\n    <xs:key name=\"unique_account\">\n      <xs:selector xpath=\"account\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:key>\n    <xs:unique name=\"unique_character\">\n      <xs:selector xpath=\"character_list/character\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:unique>\n  </xs:element>\n\n</xs:schema>"], ["updated_at", "2014-05-21 08:55:49.588083"]]
  [1m[36m (11.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.602264"], ["description", "Algorytm wyszukiwania wzorca w tekscie"], ["lang_id", 2], ["snippet", "/*  Program obsluguje pliki o wielkosci <= 1MB\n *\tJako I argument podajemy nazwe pliku, na ktorym chcemy wykonac operacje wyszukania wzorca.\n *\tJako II argument podajemy wzorzec, ktorego chcemy poszukac w tekscie. Domyslnie wzorzec jest ustawiony na sztywno\n *\t\tdla pliku \"tekst.txt\"\n *\n *\tinfo. dodatkowe:\n *\t(instrukcja == NULL) == !instrukcja\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n#include <string.h>\n#include <time.h>\n\n#define ASCII 256 // quantity of ascii characters\n#define PRIME 1009 // eg. 101, 1009, etc.\n#define E_SIZE 65536\n#define L_SIZE 1024\n#define F_SIZE 1048576 // file size, up to 1MB\n#define SPECIAL_SIZE 1048576\n\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\nFILE *file;\nstring text;\nint textLength;\nint fileEncounter[SPECIAL_SIZE] = {0};\nint encounters = 0;\n\nboolean emptyFile() {\n\tfseek(file, 0, SEEK_END);\n\t\tif (ftell(file) == 0)\n\t\t\treturn TRUE;\n\tfseek(file, 0, SEEK_SET);\n\treturn FALSE;\n}\n\nstring getFile() {\n\tint i = 0;\n\tstring str = malloc(F_SIZE*sizeof(string));\n\tstring buffer = malloc(L_SIZE*sizeof(string));\n\n\twhile (feof(file) == 0) {\n\t\tfscanf(file, \"%s\\n\", buffer);\n\t\tstrcpy(str+i, buffer);\n\t\ti += strlen(buffer);\n\t}\n\n\treturn str;\n}\n\nvoid naiveAlgorithm(string pattern, int patternLength) {\n\tint i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\ttemp[patternLength] = '\\0';\n\n\tfor (i=0; i<=textLength-patternLength; i++) {\n\t\tif (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0)\n\t\t\tfileEncounter[encounters++] = i;\n\t}\n}\n\nvoid KMPAlgorithm(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i]))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid RKAlgorithm(string pattern, int patternLength) {\n\tint hash = 1, hashPattern = 0, hashText = 0, i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\n\tfor (i=0; i<patternLength-1; i++) {\n\t\thash = (hash*ASCII)%PRIME;\n\t\thashPattern = (hashPattern*ASCII + pattern[i])%PRIME;\n\t\thashText = (hashText*ASCII + text[i])%PRIME;\n\t}\n\thashPattern = (hashPattern*ASCII + pattern[patternLength-1])%PRIME;\n\thashText = (hashText*ASCII + text[patternLength-1])%PRIME;\n\n\tfor (i=0; i<textLength-patternLength; i++) {\n\t\tif ((hashPattern == hashText) && (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0))\n\t\t\tfileEncounter[encounters++] = i;\n\t\thashText = (ASCII*(hashText - text[i]*hash) + text[i+patternLength])%PRIME;\n\t\tif (hashText < 0)\n\t\t\thashText += PRIME;\n\t}\n}\n\nvoid FSMAlgorithm(string pattern, int patternLength) { // alphabet: acgt\n\tint FAMNext[L_SIZE][ASCII] = {{0}}, i, j;\n\tint getNextState(int state, int charNO) {\n\t\tif (state < patternLength && charNO == pattern[state])\n\t\t\treturn state+1;\n\n\t\tint ps, i; // ps = (prefix == sufix)\n\n\t\tfor (ps=state; ps>0; ps--)\n\t\t\tif (pattern[ps-1] == charNO) {\n\t\t\t\tfor (i=0; i<ps-1; i++)\n\t\t\t\t\tif (pattern[i] != pattern[state-ps+i+1])\n\t\t\t\t\t\tbreak;\n\t\t\t\tif (i == ps-1)\n\t\t\t\t\treturn ps;\n\t\t\t}\n\n\t\treturn 0;\n\t}\n\n\tfor (i=0; i<=patternLength; ++i)\n\t\tfor (j=0; j<ASCII; ++j)\n\t\t\tFAMNext[i][j] = getNextState(i, j);\n\n\tj = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\tj = FAMNext[j][(int)text[i]];\n\t\tif (j == patternLength)\n\t\t\tfileEncounter[encounters++] = i-patternLength+1;\n    }\n}\n\nvoid KMPAlgorithm_modified(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i] && text[i] != '?'))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid printEncounters(string pattern, int patternLength) {\n\tint i;\n\n\tif (encounters > 0) {\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" znaleziono w sumie %i raz(y), w miejscach: \\n\", pattern, encounters);\n\t\tfor (i=0; i<encounters; i++)\n\t\t\tprintf(\"\\t* %i\\n\", fileEncounter[i]);\n\t}\n\telse\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" nie zostal znaleziony w zadnym miejscu.\\n\", pattern);\n\tencounters = 0;\n}\n\nint main(int argc, char *argv[]) {\n\tif ((file = fopen(argv[1], \"r+\")) == NULL) {\n\t\tfprintf(stderr, \"Blad: Nie mozna otworzyc pliku o nazwie \\\"%s\\\"!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\ttext = getFile();\n\ttextLength = strlen(text);\n\tif (emptyFile() == TRUE) {\n\t\tfprintf(stderr, \"Blad: Plik \\\"%s\\\" jest pusty!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\tstring pattern = argv[2];\n\tif (pattern == NULL)\n\t\tpattern = \"cggtagcggcgggggggagggcggtgggggcgagccggac\"; // default pattern\n\tint mainMenu, subMenu;\n\tint patternLength = strlen(pattern);\n\tif (patternLength > textLength) {\n\t\tfprintf(stderr, \"Blad: Dlugosc wzorca jest wieksza od dlugosci tekstu w pliku!\\n\");\n\t\texit(1);\n\t}\n\n\tclock_t start, stop;\n\tdouble naiveDuration, KMPDuration, RKDuration, FSMDuration;\n\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\t// printf(\"text: %s\\ntextLength: %i\\npattern: %s\\npatternLength: %i\\n\", text, textLength, pattern, patternLength);\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Wykonaj wyszukiwanie wzorca dla wszystkich algorytmow\\n\\t    i przedstaw ich czasy wykonania.\\n\");\n\t\tprintf(\"\\t2 - Wykonaj wyszukiwanie wzorca dla okreslonego algorytmu.\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &mainMenu);\n\n\t\tswitch (mainMenu) {\n\t\t\tcase 1:\n\t\t\t\tstart = clock();\n\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tnaiveDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tstart = clock();\n\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tKMPDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0) {\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tRKDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\t}\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tFSMDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tprintf(\"Czasy wykonania algorytmow: \\n\");\n\t\t\t\tprintf(\"\\t- naiwny algorytm: %2.5f\\n\", naiveDuration);\n\t\t\t\tprintf(\"\\t- algorytm KMP: %2.5f\\n\", KMPDuration);\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t- algorytm RK: %2.5f\\n\", RKDuration);\n\t\t\t\tprintf(\"\\t- algorytm FSM: %2.5f\\n\", FSMDuration);\n\t\t\t\tencounters = 0;\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsystem(\"cls\");\n\t\t\t\tprintf(\"Algorytmy:\\n\");\n\t\t\t\tprintf(\"\\t1 - naiwny algorytm (oczywisty)\\n\");\n\t\t\t\tprintf(\"\\t2 - algorytm Knutha-Morrisa-Pratta\\n\");\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t3 - algorytm Rabina-Karpa\\n\");\n\t\t\t\tprintf(\"\\t4 - algorytm wykorzystujacy automat skonczony\\n\");\n\t\t\t\tprintf(\"\\t5 - zmodyfikowany algorytm Knutha-Morrisa-Pratta ('?')\\n\");\n\t\t\t\tprintf(\"\\t0 - poprzednie menu\\nTwoj wybor: \");\n\t\t\t\tscanf(\"%i\", &subMenu);\n\n\t\t\t\tswitch (subMenu) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfprintf(stderr, \"Blad: Algorytm Rabina-Karpa jest dostepny tylko dla pliku \\\"tekst.txt\\\"!\");\n\t\t\t\t\t\t\tgetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tKMPAlgorithm_modified(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor algorytmu.\");\n\t\t\t\t\t\tgetch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (subMenu >= 1 && subMenu <= 5) {\n\t\t\t\t\tprintEncounters(pattern, patternLength);\n\t\t\t\t\tgetch();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tfclose(file);\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:49.602264"]]
  [1m[35m (30.0ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.3ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:49.635693"], ["description", "Simple hello world in C"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n\nint main() {\n    printf(\"Hello World!\")\n\n    return 0;\n}"], ["updated_at", "2014-05-21 08:55:49.635693"]]
  [1m[36m (203.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (1.0ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:49.844158"], ["description", "PHPInfo snippet"], ["lang_id", 9], ["snippet", "<?php\n    phpinfo();\n?>"], ["updated_at", "2014-05-21 08:55:49.844158"]]
  [1m[35m (201.4ms)[0m  commit transaction
  [1m[36m (0.3ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.8ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:50.053726"], ["description", "DOM Depth"], ["lang_id", 7], ["snippet", "var documentRoot = $(document.documentElement); // $('html')\n\n$(document).ready(function() {\n    console.log(treeDepth(documentRoot, {elem: documentRoot, depth: 0}));\n});\n\nfunction treeDepth(elem, current) {\n    var deepestElem = current;\n\n    $(elem).each(function() {\n        var elemContents = this.children;\n\n        if (elemContents) {\n            for (var i = 0; i < elemContents.length; i++) {\n                var tempElem = treeDepth(elemContents[i], {elem: elemContents[i], depth: current.depth + 1});\n\n                if (tempElem.depth > deepestElem.depth) {\n                    deepestElem = tempElem;\n                }\n            }\n        }\n    })\n\n    return deepestElem;\n}"], ["updated_at", "2014-05-21 08:55:50.053726"]]
  [1m[36m (926.4ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.2ms)[0m  begin transaction
  [1m[36mSQL (1.0ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:50.987426"], ["description", "Dynamic programming - LCS Algorithm (recursive version)"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define INF -1\n#define SIZE 32\n#define LENGTH 256\n\n/* definiowane typy zmiennych */\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\n/* zmienne globalne */\nstring R[SIZE]; // tablica z LCS\nint counter = 0; // licznik LCS\n\n/* znajdowanie najwiekszej wartosci */\nint max(int a, int b) {\n    return (a > b)? a : b; // TRUE : FALSE\n}\n\n/* wyswietlanie tabeli LCS */\nvoid CheckLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)]) {\n\tint i, j;\n\n\tprintf(\"  \");\n\tfor (j=0; j<strlen(string2); j++)\n\t\tprintf(\" %2c\", string2[j]);\n\tprintf(\"\\n\");\n\n\tfor (i=0; i<strlen(string1); i++) {\n\t\tfor (j=0; j<strlen(string2); j++) {\n\t\t\tif (j == 0)\n\t\t\t\tprintf(\"%2c\", string1[i]);\n\t\t\tif (C[i][j] == INF)\n\t\t\t\tprintf(\" %2c\", 510); // 0x0000221E\n\t\t\telse\n\t\t\t\tprintf(\" %2c\", C[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\n// wypisz najdluzszy podciag //\nvoid PrintLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (i == 0 || j == 0) return;\n\tif (string1[i] == string2[j]) {\n\t\tPrintLCS(string1, string2, C, i-1, j-1);\n\t\tprintf(\"%c\", string1[i]);\n\t}\n\telse if (C[i-1][j] >= C[i][j-1]) // '|'\n\t\tPrintLCS(string1, string2, C, i-1, j);\n\telse if (C[i-1][j] < C[i][j-1]) // '-'\n\t\tPrintLCS(string1, string2, C, i, j-1);\n}\n\n/* wypelnianie tabeli LCS */\nint LCSLookup(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (C[i][j] != INF) return C[i][j]; // jesli wartosc w tablicy != oo (nieskonczonosc)\n\tif (string1[i] == string2[j]) // jesli znaki sa takie same\n\t\tC[i][j] = LCSLookup(string1, string2, C, i-1, j-1) + 1;\n\telse { // w przeciwnym wypadku wybierz wartosc maksymalna\n\t\tC[i][j] = max(LCSLookup(string1, string2, C, i-1, j), LCSLookup(string1, string2, C, i, j-1));\n\t}\n\n\treturn C[i][j];\n}\n\n/* glowna funkcja LCS (rekursywna) */\nvoid LCSRec(string string1, string string2) {\n\tint length1 = strlen(string1), length2 = strlen(string2);\n\tint C[length1][length2]; // tablica wypelniona liczbami\n\tint i, j;\n\n\t// NWP ciagu dowolnej dlugosci oraz ciagu pustego == 0 //\n\tfor (i=0; i<length1; i++)\n\t\tC[i][0] = '0';\n\tfor (j=1; j<length2; j++) // j=1, poniewaz dla tab[0][0] juz ustalilismy wartosc = 0\n\t\tC[0][j] = '0';\n\n\tfor (i=1; i<length1; i++)\n\t\tfor (j=1; j<length2; j++)\n\t\t\tC[i][j] = INF;\n\n\tLCSLookup(string1, string2, C, length1-1, length2-1);\n\n\tsystem(\"cls\");\n\tCheckLCS(string1, string2, C);\n\tprintf(\"\\nNajdluzszy wspolny podciag:\\n\");\n\tPrintLCS(string1, string2, C, length1-1, length2-1);\n\tputs(\"\\n\");\n\treturn;\n}\n\n\nint main() {\n\tstring string1 = malloc(LENGTH * sizeof(string));\n\tstring string2 = malloc(LENGTH * sizeof(string));\n\n\tprintf(\"Podaj kolejno 2 ciagi (slowa), dla ktorych chcesz wyznaczyc ich najdluzsze\\nwspolne podciagi. Ciagi oddziel za pomoca klawisza spacja/enter:\\n\");\n\tstrcpy(string1, \".\");\n\tstrcpy(string2, \".\");\n\tscanf(\"%s %s\", string1+1, string2+1);\n\n\tLCSRec(string1, string2);\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:50.987426"]]
  [1m[35m (14.7ms)[0m  commit transaction
  [1m[36m (0.4ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.011261"], ["description", "SQL Inner Join example"], ["lang_id", 11], ["snippet", "SELECT p.name, i.name FROM player p\n  INNER JOIN player_has_item pi ON pi.id_player = p.id\n  INNER JOIN item i ON pi.id_item = i.id;"], ["updated_at", "2014-05-21 08:55:51.011261"]]
  [1m[36m (61.5ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.079901"], ["description", "B-Tree snippet"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n\n#define T 3 // stopien B-drzewa (min. ilosc kluczy to t-1, max. 2t-1, ilosc wskaznikow 2t)\n\ntypedef enum {FALSE, TRUE} boolean;\ntypedef enum {ROOT, NODE} nodeType;\ntypedef struct {\n\tshort n;        // ilosc kluczy (-1 -> wezel usuniety)\n\tint k[2*T-1];   // klucze\n\tint c[2*T];     // wskazniki do synow (pozycje w pliku: 0,1,2 ...) (c[0] = -1 == aktualny wezel to lisc)\n} Node;\nint nodeSize = sizeof(Node); // rozmiar wezla w bajtach\nFILE *treeFile;  // plik drzewa (zawierajacy wezly)\n// FILE *stackFile; // plik stosu (zawierajacy wolne pozycje)\nint rootPos = -1; // pozycja korzenia\nint nextPos = 0; // nastepna wolna pozycja // ew. zapisywanie info. do pliku o nastepnej wolnej pozycji\n\nint getNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\treturn (ftell(treeFile)-sizeof(int))/nodeSize; // zwraca pozycje wezla\n}\n\nint saveNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfwrite(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nint readNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfread(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nvoid saveRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfwrite(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\nvoid readRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfread(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\n/* restrukturyzacja (rozbijanie wezla) */\nvoid nodeSplit(Node mainNode, Node childNode, int i, nodeType nType, int mainPos, int childPos) {\n\tNode anotherNode;\n\tint j;\n\t\n\tif (childNode.c[0] == -1)\n\t\tanotherNode.c[0] = childNode.c[0];\n\tanotherNode.n = T-1;\n\t\n\tfor (j=0; j<T-1; j++)\n\t\tanotherNode.k[j] = childNode.k[j+T];\n\t\n\tif (childNode.c[0] != -1)\n\t\tfor (j=0; j<T; j++)\n\t\t\tanotherNode.c[j] = childNode.c[j+T];\n\t\t\t\n\tchildNode.n = T-1;\n\t\n\tfor (j=mainNode.n; j>i; j--)\n\t\tmainNode.k[j] = mainNode.k[j-1];\n\t\t\n\tmainNode.k[i] = childNode.k[T-1];\n\t\n\tfor (j=mainNode.n+1; j>i+1; j--)\n\t\tmainNode.c[j] = mainNode.c[j-1];\n\t\n\tmainNode.n++;\n\n\tsaveNode(childPos, &childNode);\n\tsaveNode(nextPos, &anotherNode);\n\tmainNode.c[i+1] = nextPos++;\n\t\n\tif (nType == ROOT)\n\t\tsaveNode(nextPos, &mainNode); // nowy korzen\n\telse if (nType == NODE)\n\t\tsaveNode(mainPos, &mainNode);\n}\n\nvoid insertValue(Node node, int nodePos, int value) {\n\tint i = 0;\n\t\n\tif (node.c[0] == -1) { // lisc\n\t\ti = node.n;\n\t\twhile (i >= 1 && value < node.k[i-1]) {\n\t\t\tnode.k[i] = node.k[i-1];\n\t\t\ti--;\n\t\t}\n\t\tnode.k[i] = value;\n\t\tnode.n++;\n\t\tsaveNode(nodePos, &node);\n\t}\n\telse { // wezel wewn.\n\t\tNode temp;\n\t\tint tempPos;\n\t\tfor (i=0; i<node.n; i++) // szukanie miejsca na wezel miedzy kluczami (przejscie do syna)\n\t\t\tif (value < node.k[i])\n\t\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (value >= node.k[i-1])\n\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (temp.n == 2*T-1) { // czy wezel-syn jest pelny?\n\t\t\tnodeSplit(node, temp, i, NODE, nodePos, tempPos);\n\t\t\treadNode(nodePos, &node);\n\t\t\tinsertValue(node, nodePos, value);\n\t\t\treturn;\n\t\t}\n\t\tinsertValue(temp, tempPos, value);\n\t}\n}\n\nvoid insert(int value) {\n\tNode root;\n\n\tif (rootPos == -1) { // drzewo puste -> tworzenie korzenia\n\t\troot.n = 1; root.k[0] = value; root.c[0] = -1;\n\t\trootPos = saveNode(0, &root);\n\t\tnextPos = rootPos + 1;\n\t\tsaveRoot();\n\t}\n\telse { // drzewo niepuste\n\t\treadNode(rootPos, &root);\n\t\tif (root.n == 2*T-1) { // czy korzen jest pelny?\n\t\t\tNode newRoot;\n\t\t\tnewRoot.n = 0;\n\t\t\tnewRoot.c[0] = rootPos;\n\t\t\tnodeSplit(newRoot, root, 0, ROOT, 0, rootPos);\n\t\t\trootPos = nextPos++;\n\t\t\tsaveRoot();\n\t\t\treadNode(rootPos, &root);\n\t\t}\n\t\tinsertValue(root, rootPos, value);\n\t}\n}\n\nvoid drukujB(int r, int p) {\n\t// drukuje B-drzewo o korzeniu r (pozycja w pliku)\n\t// wydruk przesuniety o p w prawo\n\tNode w;\n\tint i, j;\n\treadNode(r,&w);\n\tif (w.c[0] == -1) {\n\t\tfor (i=0;i<p;i++)\n\t\t\tprintf(\" \");\n\t\tfor (i=0;i<w.n;i++)\n\t\t\tprintf(\"%d \",w.k[i]);\n\t\tprintf(\"\\n\");\n\t} \n\telse {\n\t\tdrukujB(w.c[w.n],p+4);\n\t\tfor (i=w.n-1;i>=0;i--){\n\t\t\tfor (j=0;j<p;j++)\n\t\t\t\tprintf(\" \");\n\t\t\tprintf(\"%d\\n\",w.k[i]);\n\t\t\tdrukujB(w.c[i],p+4);\n\t\t}\n\t}\n}\n\n/* testowe wypisywanie danych z pliku */\nvoid printFile() {\n\tint i, j;\n\tNode temp;\n\t\n\treadRoot();\n\tprintf(\"rootPos: %i\\n\\n\", rootPos);\n\tfor (i=0; i<nextPos; i++) {\n\t\treadNode(i, &temp);\n\t\tprintf(\"__Node #%i of pos__\\n\", i);\n\t\tprintf(\"node.n: %i\\n\", temp.n);\n\t\tfor (j=0; j<2*T-1; j++)\n\t\t\tprintf(\"node.k[%i]: %i\\n\", j, temp.k[j]);\n\t\tfor (j=0; j<2*T; j++)\n\t\t\tprintf(\"node.c[%i]: %i\\n\", j, temp.c[j]);\n\t\tputs(\"\");\n\t}\n}\n\nint main() {\n\tint menu, value;\n\ttreeFile = fopen(\"b-tree.bt\", \"w+\");\n\t\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Dopisz nowa wartosc do drzewa\\n\");\n\t\tprintf(\"\\t3 - Wyswietl drzewo\\n\");\n\t\tprintf(\"\\t[TEST] 4 - Wyswietl dane z pliku\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &menu);\n\t\t\n\t\tswitch (menu) {\n\t\t\tcase 1:\n\t\t\t\tprintf(\"Podaj wartosc, ktora chcesz wprowadzic do drzewa: \");\n\t\t\t\tscanf(\"%i\", &value);\n\t\t\t\tinsert(value);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdrukujB(rootPos, 0);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintFile();\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tprintf(\"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfclose(treeFile);\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:51.079901"]]
  [1m[35m (14.3ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.101442"], ["description", "EncryptUtils"], ["lang_id", 6], ["snippet", "import sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\n\npublic class EncryptUtils {\n    public static final String DEFAULT_ENCODING=\"UTF-8\";\n    static BASE64Encoder enc=new BASE64Encoder();\n    static BASE64Decoder dec=new BASE64Decoder();\n\n    public static String base64encode(String text) {\n        try {\n            String rez = enc.encode(text.getBytes(DEFAULT_ENCODING));\n            return rez;\n        }\n        catch (UnsupportedEncodingException e) {\n            return null;\n        }\n    }\n\n    public static String base64decode(String text){\n\n        try {\n            return new String(dec.decodeBuffer( text ),DEFAULT_ENCODING);\n        }\n        catch (IOException e) {\n            return null;\n        }\n\n    }\n\n    public static String xorMessage(String message, String key) {\n        try {\n            if (message==null || key==null) return null;\n\n            char[] keys=key.toCharArray();\n            char[] mesg=message.toCharArray();\n\n            int ml=mesg.length;\n            int kl=keys.length;\n            char[] newmsg=new char[ml];\n\n            for (int i=0; i<ml; i++) {\n                newmsg[i]=(char)(mesg[i]^keys[i%kl]);\n            }\n            mesg=null; keys=null;\n            return new String(newmsg);\n        }\n        catch (Exception e) {\n            return null;\n        }\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:51.101442"]]
  [1m[36m (12.0ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.117996"], ["description", "Connect singleton"], ["lang_id", 9], ["snippet", "<?php\n\nclass DBConnect {\n    protected static $connection;\n\n    private $dbms;\n    private $host;\n    private $db;\n    private $user;\n    private $password;\n\n    private $globals = array();\n\n    public function __construct($dbms, $host, $db, $user, $password) {\n        $this->dbms = $dbms;\n        $this->host = $host;\n        $this->db = $db;\n        $this->user = $user;\n        $this->password = $password;\n\n        $this->getConnection();\n    }\n\n    public function getConnection() {\n        if (!self::$connection) {\n            try {\n                self::$connection = new PDO($this->dbms . ':host=' . $this->host . ';dbname=' . $this->db, $this->user, $this->password);\n                self::$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n                if ($this->dbms == 'mysql')\n                    self::$connection->query('SET NAMES utf8');\n            } catch (PDOException $e) {\n                global $GLOBALS; // not necessary\n                $GLOBALS['db_error_bold'] = 'Database error: ';\n                $GLOBALS['db_error'] = 'Couldn\\'t connect to database';\n\n                return -1;\n            }\n        }\n\n        return self::$connection;\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:51.117996"]]
  [1m[35m (67.0ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.189660"], ["description", "Fibbonaci recursive_function in Shell"], ["lang_id", 62], ["snippet", "#!/bin/bash\n\nfibbo=0;\ntemp=0;\nfor i in 'seq 0..20'; do\n\techo -n \"$fibbo\"\n\tif [ $i = 1]; then\n\t\t$((fibbo)) = 1\n\telif [ $i -gt 1]; then\n\t\t$((fibbo)) =\n\tfi\ndone"], ["updated_at", "2014-05-21 08:55:51.189660"]]
  [1m[36m (13.8ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (6.3ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.211152"], ["description", "Polynomial class"], ["lang_id", 6], ["snippet", "package mo.calc;\n\nimport java.util.List;\n\nimport org.paukov.combinatorics.Factory;\nimport org.paukov.combinatorics.Generator;\nimport org.paukov.combinatorics.ICombinatoricsVector;\n\npublic class Polynomial { // Interpolating Newton's method\n\tprivate Node node;\n\tprivate double[] b;\n\tprivate double[] W; // polynomial\n\n\tpublic Polynomial(Node node) {\n\t\tif (!node.isEmpty()) {\n\t\t\tthis.node = node;\n\t\t\tb = new double[node.getSize()];\n\t\t\tW = new double[node.getSize()];\n\t\t}\n\t\telse\n\t\t\tSystem.err.println(\"Error in [\" + this.getClass().getSimpleName() +\"]Constructor: Node is null!\");\n\t}\n\n\t/**\n\t * <b>Initial calculation</b>\n\t * Calculates <b>b</b>[] and <b>W</b>[] coefficients\n\t */\n\tpublic void init() {\n\t\tcalculateB();\n\t\tcalculateCoeffs();\n\t}\n\n\t/**\n\t * Set <b>x</b> into polynomial and calculate it\n\t */\n\tpublic double calculatePolynomial(Integer x) {\n\t\tdouble P = W[0]; // P = 0?\n\n\t\tif (W.length > 0)\n\t\t\tfor (int i = 1; i < W.length; i++)\n\t\t\t\tP += W[i]*Math.pow(x, i);\n\n\t\treturn P;\n\t}\n\n\t/**\n\t * Extends Node(x[], y[]) by adding new Node(<b>x</b>, <b>y</b>) and calculate it\n\t */\n\tpublic void extendNCalculate(Integer x, Integer y) {\n\t\tnode.extend(x, y);\n\t\tdouble[] tempB = new double[b.length + 1];\n\t\tdouble[] tempW = new double[W.length + 1];\n\t\tSystem.arraycopy(b, 0, tempB, 0, b.length);\n\t\tSystem.arraycopy(W, 0, tempW, 0, W.length);\n\t\tb = tempB;\n\t\tW = tempW;\n\n\t\tb[b.length - 1] = (node.getY(node.getSize() - 1) - calculatePolynomial(node.getX(node.getSize() - 1))) / calcProduct(node.getSize() - 1, node.getSize() - 2);\n\t\tcalculateCoeffs();\n\t}\n\n\tpublic void printPolynomial() {\n\t\tString s = \"P(x) = \" + W[0];\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printB() {\n\t\tString s = \"b[] = {\";\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \", \");\n\t\ts = s.concat(b[b.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printCoeffs() {\n\t\tString s = \"W[] = {\";\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \", \");\n\t\ts = s.concat(W[W.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic String getTex() {\n\t\tString s = \"\\\\\\\\x[\\\\medspace] = [\";\n\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getX(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getX(b.length - 1) + \"]\\\\\\\\y[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getY(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getY(b.length - 1) + \"]\\\\\\\\b[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \",\\\\medspace\");\n\t\ts = s.concat(b[b.length - 1] + \"]\\\\\\\\W[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \",\\\\medspace\");\n\t\ts = s.concat(W[W.length - 1] + \"]\\\\\\\\P(x) = \" + W[0]);\n\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * Calculates <b>b</b>[]\n\t */\n\tprivate void calculateB() {\n\t\tfor (int i = 0; i < b.length; i++)\n\t\t\tb[i] = (node.getY(i) - calcSeries(i, i-1)) / calcProduct(i, i-1);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[] coefficients\n\t */\n\tprivate void calculateCoeffs() {\n\t\tfor (int i = 0; i < W.length; i++)\n\t\t\tW[i] = calcCoeff(i, W.length - 1);\n\t}\n\n\t/**\n\t * Summing => b0 + b1(xi - x0) + ...\n\t */\n\tprivate double calcSeries(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn (b[i] * calcProduct(iAtX, i-1)) + calcSeries(iAtX, --i);\n\t}\n\n\t/**\n\t * Multiplying => (xi - x0)(xi - x1)(xi - x2)...\n\t */\n\tprivate double calcProduct(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn (node.getX(iAtX) - node.getX(i)) * calcProduct(iAtX, --i);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[<b>i</b>]<br>\n\t * <b>i</b> is index\n\t */\n\tprivate double calcCoeff(int degree, int i) {\n\t\tif (degree == i)\n\t\t\treturn b[i];\n\t\telse\n\t\t\treturn b[i] * calcBrackets(degree, i-1) + calcCoeff(degree, --i);\n\t}\n\n\t/**\n\t * eg. (x2 - x1) + (x2 - x1) + (x1 - x0)\n\t */\n\tprivate int calcBrackets(int degree, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse if (degree == 0)\n\t\t\treturn -node.getX(i) * calcBrackets(degree, --i);\n\t\telse\n\t\t\treturn calcSumOfProducts(degree, i+1);\n\t}\n\n\t/**\n\t * Extension of method <b>calcBracets</b>\n\t */\n\tprivate int calcSumOfProducts(int degree, int i) {\n\t\tICombinatoricsVector<Integer> vector = Factory.createVector(node.getXElements(i));\n\t\tGenerator<Integer> generator = Factory.createSimpleCombinationGenerator(vector, i - degree);\n\t\tList<ICombinatoricsVector<Integer>> temp = generator.generateAllObjects();\n\n\t\tint sum = 0;\n\t\tfor (int m = 0; m < temp.size(); m++) {\n\t\t\tint mul = 1;\n\t\t\tfor (int n = 0; n < temp.get(m).getSize(); n++) {\n\t\t\t\tmul *= -temp.get(m).getValue(n);\n\t\t\t}\n\t\t\tsum += mul;\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n"], ["updated_at", "2014-05-21 08:55:51.211152"]]
  [1m[35m (52.8ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.275946"], ["description", "Imported DB Schema"], ["lang_id", 82], ["snippet", "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n\n  <xs:import schemaLocation=\"definedTypes.xsd\" namespace=\"http://www.w3.org/2001/XMLSchema\"/>\n\n  <xs:complexType name=\"blocked_until\">\n    <xs:all minOccurs=\"0\">\n      <xs:element name=\"date\" type=\"date\"/>\n      <xs:element name=\"time\" type=\"time\"/>\n    </xs:all>\n    <xs:attribute name=\"active\" type=\"boolean\" default=\"false\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"account\">\n    <xs:sequence>\n      <xs:element name=\"login\" type=\"loginST\"/>\n      <xs:element name=\"password\" type=\"password\"/>\n      <xs:element name=\"rest_access\" type=\"rest_accessST\" default=\"Player\"/>\n      <xs:element name=\"email\" type=\"emailST\"/>\n      <xs:element name=\"recovery_key\" type=\"recovery_key\"/>\n      <xs:element name=\"creation_date\" type=\"date\"/>\n      <xs:element name=\"creation_time\" type=\"time\"/>\n      <xs:element name=\"warn_level\" type=\"warn_level\"/>\n      <xs:element name=\"blocked_until\" type=\"blocked_until\"/>\n      <xs:element name=\"last_ip\" type=\"ipST\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"skills\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"skill\" type=\"skill\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"items\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"item\" type=\"item\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"character\">\n    <xs:sequence>\n      <xs:element name=\"health\" type=\"integer\"/>\n      <xs:element name=\"max_health\" type=\"integer\"/>\n      <xs:choice>\n        <xs:element name=\"mana\" type=\"integer\"/>\n        <xs:element name=\"rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:choice>\n        <xs:element name=\"max_mana\" type=\"integer\"/>\n        <xs:element name=\"max_rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:element name=\"level\" type=\"integer\"/>\n      <xs:element name=\"experience\" type=\"integer\"/>\n      <xs:element name=\"strength\" type=\"integer\"/>\n      <xs:element name=\"agility\" type=\"integer\"/>\n      <xs:element name=\"intelligence\" type=\"integer\"/>\n      <xs:element name=\"skills\" type=\"skills\"/>\n      <xs:element name=\"equipped\" type=\"items\"/>\n      <xs:element name=\"items\" type=\"items\"/>\n      <xs:element name=\"skins\" type=\"value_list\"/>\n      <xs:element name=\"skin_id\" type=\"unique_id\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n    <xs:attribute name=\"class\" type=\"classST\"/>\n    <xs:attribute name=\"gender\" type=\"genderST\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"character_list\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"character\" type=\"character\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:element name=\"account_info\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"account\" type=\"account\"/>\n        <xs:element name=\"character_list\" type=\"character_list\"/>\n      </xs:sequence>\n      <xs:attribute name=\"exported\" type=\"boolean\" fixed=\"true\"/>\n    </xs:complexType>\n    <xs:key name=\"unique_account\">\n      <xs:selector xpath=\"account\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:key>\n    <xs:unique name=\"unique_character\">\n      <xs:selector xpath=\"character_list/character\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:unique>\n  </xs:element>\n\n</xs:schema>"], ["updated_at", "2014-05-21 08:55:51.275946"]]
  [1m[36m (23.2ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.0ms)[0m  begin transaction
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.302959"], ["description", "Algorytm wyszukiwania wzorca w tekscie"], ["lang_id", 2], ["snippet", "/*  Program obsluguje pliki o wielkosci <= 1MB\n *\tJako I argument podajemy nazwe pliku, na ktorym chcemy wykonac operacje wyszukania wzorca.\n *\tJako II argument podajemy wzorzec, ktorego chcemy poszukac w tekscie. Domyslnie wzorzec jest ustawiony na sztywno\n *\t\tdla pliku \"tekst.txt\"\n *\n *\tinfo. dodatkowe:\n *\t(instrukcja == NULL) == !instrukcja\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n#include <string.h>\n#include <time.h>\n\n#define ASCII 256 // quantity of ascii characters\n#define PRIME 1009 // eg. 101, 1009, etc.\n#define E_SIZE 65536\n#define L_SIZE 1024\n#define F_SIZE 1048576 // file size, up to 1MB\n#define SPECIAL_SIZE 1048576\n\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\nFILE *file;\nstring text;\nint textLength;\nint fileEncounter[SPECIAL_SIZE] = {0};\nint encounters = 0;\n\nboolean emptyFile() {\n\tfseek(file, 0, SEEK_END);\n\t\tif (ftell(file) == 0)\n\t\t\treturn TRUE;\n\tfseek(file, 0, SEEK_SET);\n\treturn FALSE;\n}\n\nstring getFile() {\n\tint i = 0;\n\tstring str = malloc(F_SIZE*sizeof(string));\n\tstring buffer = malloc(L_SIZE*sizeof(string));\n\n\twhile (feof(file) == 0) {\n\t\tfscanf(file, \"%s\\n\", buffer);\n\t\tstrcpy(str+i, buffer);\n\t\ti += strlen(buffer);\n\t}\n\n\treturn str;\n}\n\nvoid naiveAlgorithm(string pattern, int patternLength) {\n\tint i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\ttemp[patternLength] = '\\0';\n\n\tfor (i=0; i<=textLength-patternLength; i++) {\n\t\tif (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0)\n\t\t\tfileEncounter[encounters++] = i;\n\t}\n}\n\nvoid KMPAlgorithm(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i]))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid RKAlgorithm(string pattern, int patternLength) {\n\tint hash = 1, hashPattern = 0, hashText = 0, i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\n\tfor (i=0; i<patternLength-1; i++) {\n\t\thash = (hash*ASCII)%PRIME;\n\t\thashPattern = (hashPattern*ASCII + pattern[i])%PRIME;\n\t\thashText = (hashText*ASCII + text[i])%PRIME;\n\t}\n\thashPattern = (hashPattern*ASCII + pattern[patternLength-1])%PRIME;\n\thashText = (hashText*ASCII + text[patternLength-1])%PRIME;\n\n\tfor (i=0; i<textLength-patternLength; i++) {\n\t\tif ((hashPattern == hashText) && (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0))\n\t\t\tfileEncounter[encounters++] = i;\n\t\thashText = (ASCII*(hashText - text[i]*hash) + text[i+patternLength])%PRIME;\n\t\tif (hashText < 0)\n\t\t\thashText += PRIME;\n\t}\n}\n\nvoid FSMAlgorithm(string pattern, int patternLength) { // alphabet: acgt\n\tint FAMNext[L_SIZE][ASCII] = {{0}}, i, j;\n\tint getNextState(int state, int charNO) {\n\t\tif (state < patternLength && charNO == pattern[state])\n\t\t\treturn state+1;\n\n\t\tint ps, i; // ps = (prefix == sufix)\n\n\t\tfor (ps=state; ps>0; ps--)\n\t\t\tif (pattern[ps-1] == charNO) {\n\t\t\t\tfor (i=0; i<ps-1; i++)\n\t\t\t\t\tif (pattern[i] != pattern[state-ps+i+1])\n\t\t\t\t\t\tbreak;\n\t\t\t\tif (i == ps-1)\n\t\t\t\t\treturn ps;\n\t\t\t}\n\n\t\treturn 0;\n\t}\n\n\tfor (i=0; i<=patternLength; ++i)\n\t\tfor (j=0; j<ASCII; ++j)\n\t\t\tFAMNext[i][j] = getNextState(i, j);\n\n\tj = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\tj = FAMNext[j][(int)text[i]];\n\t\tif (j == patternLength)\n\t\t\tfileEncounter[encounters++] = i-patternLength+1;\n    }\n}\n\nvoid KMPAlgorithm_modified(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i] && text[i] != '?'))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid printEncounters(string pattern, int patternLength) {\n\tint i;\n\n\tif (encounters > 0) {\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" znaleziono w sumie %i raz(y), w miejscach: \\n\", pattern, encounters);\n\t\tfor (i=0; i<encounters; i++)\n\t\t\tprintf(\"\\t* %i\\n\", fileEncounter[i]);\n\t}\n\telse\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" nie zostal znaleziony w zadnym miejscu.\\n\", pattern);\n\tencounters = 0;\n}\n\nint main(int argc, char *argv[]) {\n\tif ((file = fopen(argv[1], \"r+\")) == NULL) {\n\t\tfprintf(stderr, \"Blad: Nie mozna otworzyc pliku o nazwie \\\"%s\\\"!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\ttext = getFile();\n\ttextLength = strlen(text);\n\tif (emptyFile() == TRUE) {\n\t\tfprintf(stderr, \"Blad: Plik \\\"%s\\\" jest pusty!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\tstring pattern = argv[2];\n\tif (pattern == NULL)\n\t\tpattern = \"cggtagcggcgggggggagggcggtgggggcgagccggac\"; // default pattern\n\tint mainMenu, subMenu;\n\tint patternLength = strlen(pattern);\n\tif (patternLength > textLength) {\n\t\tfprintf(stderr, \"Blad: Dlugosc wzorca jest wieksza od dlugosci tekstu w pliku!\\n\");\n\t\texit(1);\n\t}\n\n\tclock_t start, stop;\n\tdouble naiveDuration, KMPDuration, RKDuration, FSMDuration;\n\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\t// printf(\"text: %s\\ntextLength: %i\\npattern: %s\\npatternLength: %i\\n\", text, textLength, pattern, patternLength);\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Wykonaj wyszukiwanie wzorca dla wszystkich algorytmow\\n\\t    i przedstaw ich czasy wykonania.\\n\");\n\t\tprintf(\"\\t2 - Wykonaj wyszukiwanie wzorca dla okreslonego algorytmu.\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &mainMenu);\n\n\t\tswitch (mainMenu) {\n\t\t\tcase 1:\n\t\t\t\tstart = clock();\n\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tnaiveDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tstart = clock();\n\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tKMPDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0) {\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tRKDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\t}\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tFSMDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tprintf(\"Czasy wykonania algorytmow: \\n\");\n\t\t\t\tprintf(\"\\t- naiwny algorytm: %2.5f\\n\", naiveDuration);\n\t\t\t\tprintf(\"\\t- algorytm KMP: %2.5f\\n\", KMPDuration);\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t- algorytm RK: %2.5f\\n\", RKDuration);\n\t\t\t\tprintf(\"\\t- algorytm FSM: %2.5f\\n\", FSMDuration);\n\t\t\t\tencounters = 0;\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsystem(\"cls\");\n\t\t\t\tprintf(\"Algorytmy:\\n\");\n\t\t\t\tprintf(\"\\t1 - naiwny algorytm (oczywisty)\\n\");\n\t\t\t\tprintf(\"\\t2 - algorytm Knutha-Morrisa-Pratta\\n\");\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t3 - algorytm Rabina-Karpa\\n\");\n\t\t\t\tprintf(\"\\t4 - algorytm wykorzystujacy automat skonczony\\n\");\n\t\t\t\tprintf(\"\\t5 - zmodyfikowany algorytm Knutha-Morrisa-Pratta ('?')\\n\");\n\t\t\t\tprintf(\"\\t0 - poprzednie menu\\nTwoj wybor: \");\n\t\t\t\tscanf(\"%i\", &subMenu);\n\n\t\t\t\tswitch (subMenu) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfprintf(stderr, \"Blad: Algorytm Rabina-Karpa jest dostepny tylko dla pliku \\\"tekst.txt\\\"!\");\n\t\t\t\t\t\t\tgetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tKMPAlgorithm_modified(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor algorytmu.\");\n\t\t\t\t\t\tgetch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (subMenu >= 1 && subMenu <= 5) {\n\t\t\t\t\tprintEncounters(pattern, patternLength);\n\t\t\t\t\tgetch();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tfclose(file);\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:51.302959"]]
  [1m[35m (74.3ms)[0m  commit transaction
  [1m[36m (0.4ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.0ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.384324"], ["description", "Simple hello world in C"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n\nint main() {\n    printf(\"Hello World!\")\n\n    return 0;\n}"], ["updated_at", "2014-05-21 08:55:51.384324"]]
  [1m[36m (320.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.4ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.713118"], ["description", "PHPInfo snippet"], ["lang_id", 9], ["snippet", "<?php\n    phpinfo();\n?>"], ["updated_at", "2014-05-21 08:55:51.713118"]]
  [1m[35m (11.2ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.6ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.730371"], ["description", "DOM Depth"], ["lang_id", 7], ["snippet", "var documentRoot = $(document.documentElement); // $('html')\n\n$(document).ready(function() {\n    console.log(treeDepth(documentRoot, {elem: documentRoot, depth: 0}));\n});\n\nfunction treeDepth(elem, current) {\n    var deepestElem = current;\n\n    $(elem).each(function() {\n        var elemContents = this.children;\n\n        if (elemContents) {\n            for (var i = 0; i < elemContents.length; i++) {\n                var tempElem = treeDepth(elemContents[i], {elem: elemContents[i], depth: current.depth + 1});\n\n                if (tempElem.depth > deepestElem.depth) {\n                    deepestElem = tempElem;\n                }\n            }\n        }\n    })\n\n    return deepestElem;\n}"], ["updated_at", "2014-05-21 08:55:51.730371"]]
  [1m[36m (96.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.8ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.833838"], ["description", "Dynamic programming - LCS Algorithm (recursive version)"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define INF -1\n#define SIZE 32\n#define LENGTH 256\n\n/* definiowane typy zmiennych */\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\n/* zmienne globalne */\nstring R[SIZE]; // tablica z LCS\nint counter = 0; // licznik LCS\n\n/* znajdowanie najwiekszej wartosci */\nint max(int a, int b) {\n    return (a > b)? a : b; // TRUE : FALSE\n}\n\n/* wyswietlanie tabeli LCS */\nvoid CheckLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)]) {\n\tint i, j;\n\n\tprintf(\"  \");\n\tfor (j=0; j<strlen(string2); j++)\n\t\tprintf(\" %2c\", string2[j]);\n\tprintf(\"\\n\");\n\n\tfor (i=0; i<strlen(string1); i++) {\n\t\tfor (j=0; j<strlen(string2); j++) {\n\t\t\tif (j == 0)\n\t\t\t\tprintf(\"%2c\", string1[i]);\n\t\t\tif (C[i][j] == INF)\n\t\t\t\tprintf(\" %2c\", 510); // 0x0000221E\n\t\t\telse\n\t\t\t\tprintf(\" %2c\", C[i][j]);\n\t\t}\n\t\tprintf(\"\\n\");\n\t}\n}\n\n// wypisz najdluzszy podciag //\nvoid PrintLCS(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (i == 0 || j == 0) return;\n\tif (string1[i] == string2[j]) {\n\t\tPrintLCS(string1, string2, C, i-1, j-1);\n\t\tprintf(\"%c\", string1[i]);\n\t}\n\telse if (C[i-1][j] >= C[i][j-1]) // '|'\n\t\tPrintLCS(string1, string2, C, i-1, j);\n\telse if (C[i-1][j] < C[i][j-1]) // '-'\n\t\tPrintLCS(string1, string2, C, i, j-1);\n}\n\n/* wypelnianie tabeli LCS */\nint LCSLookup(string string1, string string2, int C[strlen(string1)][strlen(string2)], int i, int j) {\n\tif (C[i][j] != INF) return C[i][j]; // jesli wartosc w tablicy != oo (nieskonczonosc)\n\tif (string1[i] == string2[j]) // jesli znaki sa takie same\n\t\tC[i][j] = LCSLookup(string1, string2, C, i-1, j-1) + 1;\n\telse { // w przeciwnym wypadku wybierz wartosc maksymalna\n\t\tC[i][j] = max(LCSLookup(string1, string2, C, i-1, j), LCSLookup(string1, string2, C, i, j-1));\n\t}\n\n\treturn C[i][j];\n}\n\n/* glowna funkcja LCS (rekursywna) */\nvoid LCSRec(string string1, string string2) {\n\tint length1 = strlen(string1), length2 = strlen(string2);\n\tint C[length1][length2]; // tablica wypelniona liczbami\n\tint i, j;\n\n\t// NWP ciagu dowolnej dlugosci oraz ciagu pustego == 0 //\n\tfor (i=0; i<length1; i++)\n\t\tC[i][0] = '0';\n\tfor (j=1; j<length2; j++) // j=1, poniewaz dla tab[0][0] juz ustalilismy wartosc = 0\n\t\tC[0][j] = '0';\n\n\tfor (i=1; i<length1; i++)\n\t\tfor (j=1; j<length2; j++)\n\t\t\tC[i][j] = INF;\n\n\tLCSLookup(string1, string2, C, length1-1, length2-1);\n\n\tsystem(\"cls\");\n\tCheckLCS(string1, string2, C);\n\tprintf(\"\\nNajdluzszy wspolny podciag:\\n\");\n\tPrintLCS(string1, string2, C, length1-1, length2-1);\n\tputs(\"\\n\");\n\treturn;\n}\n\n\nint main() {\n\tstring string1 = malloc(LENGTH * sizeof(string));\n\tstring string2 = malloc(LENGTH * sizeof(string));\n\n\tprintf(\"Podaj kolejno 2 ciagi (slowa), dla ktorych chcesz wyznaczyc ich najdluzsze\\nwspolne podciagi. Ciagi oddziel za pomoca klawisza spacja/enter:\\n\");\n\tstrcpy(string1, \".\");\n\tstrcpy(string2, \".\");\n\tscanf(\"%s %s\", string1+1, string2+1);\n\n\tLCSRec(string1, string2);\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:51.833838"]]
  [1m[35m (14.7ms)[0m  commit transaction
  [1m[36m (0.4ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.6ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.855899"], ["description", "SQL Inner Join example"], ["lang_id", 11], ["snippet", "SELECT p.name, i.name FROM player p\n  INNER JOIN player_has_item pi ON pi.id_player = p.id\n  INNER JOIN item i ON pi.id_item = i.id;"], ["updated_at", "2014-05-21 08:55:51.855899"]]
  [1m[36m (10.7ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.5ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.872595"], ["description", "B-Tree snippet"], ["lang_id", 2], ["snippet", "#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n\n#define T 3 // stopien B-drzewa (min. ilosc kluczy to t-1, max. 2t-1, ilosc wskaznikow 2t)\n\ntypedef enum {FALSE, TRUE} boolean;\ntypedef enum {ROOT, NODE} nodeType;\ntypedef struct {\n\tshort n;        // ilosc kluczy (-1 -> wezel usuniety)\n\tint k[2*T-1];   // klucze\n\tint c[2*T];     // wskazniki do synow (pozycje w pliku: 0,1,2 ...) (c[0] = -1 == aktualny wezel to lisc)\n} Node;\nint nodeSize = sizeof(Node); // rozmiar wezla w bajtach\nFILE *treeFile;  // plik drzewa (zawierajacy wezly)\n// FILE *stackFile; // plik stosu (zawierajacy wolne pozycje)\nint rootPos = -1; // pozycja korzenia\nint nextPos = 0; // nastepna wolna pozycja // ew. zapisywanie info. do pliku o nastepnej wolnej pozycji\n\nint getNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\treturn (ftell(treeFile)-sizeof(int))/nodeSize; // zwraca pozycje wezla\n}\n\nint saveNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfwrite(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nint readNode(unsigned long int i, Node *node) {\n\tfseek(treeFile, i*nodeSize+(sizeof(int)), SEEK_SET);\n\tfread(node, nodeSize, 1, treeFile);\n\t\n\treturn getNode(i, node);\n}\n\nvoid saveRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfwrite(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\nvoid readRoot() {\n\tfseek(treeFile, 0, SEEK_SET);\n\tfread(&rootPos, (sizeof(int)), 1, treeFile);\n}\n\n/* restrukturyzacja (rozbijanie wezla) */\nvoid nodeSplit(Node mainNode, Node childNode, int i, nodeType nType, int mainPos, int childPos) {\n\tNode anotherNode;\n\tint j;\n\t\n\tif (childNode.c[0] == -1)\n\t\tanotherNode.c[0] = childNode.c[0];\n\tanotherNode.n = T-1;\n\t\n\tfor (j=0; j<T-1; j++)\n\t\tanotherNode.k[j] = childNode.k[j+T];\n\t\n\tif (childNode.c[0] != -1)\n\t\tfor (j=0; j<T; j++)\n\t\t\tanotherNode.c[j] = childNode.c[j+T];\n\t\t\t\n\tchildNode.n = T-1;\n\t\n\tfor (j=mainNode.n; j>i; j--)\n\t\tmainNode.k[j] = mainNode.k[j-1];\n\t\t\n\tmainNode.k[i] = childNode.k[T-1];\n\t\n\tfor (j=mainNode.n+1; j>i+1; j--)\n\t\tmainNode.c[j] = mainNode.c[j-1];\n\t\n\tmainNode.n++;\n\n\tsaveNode(childPos, &childNode);\n\tsaveNode(nextPos, &anotherNode);\n\tmainNode.c[i+1] = nextPos++;\n\t\n\tif (nType == ROOT)\n\t\tsaveNode(nextPos, &mainNode); // nowy korzen\n\telse if (nType == NODE)\n\t\tsaveNode(mainPos, &mainNode);\n}\n\nvoid insertValue(Node node, int nodePos, int value) {\n\tint i = 0;\n\t\n\tif (node.c[0] == -1) { // lisc\n\t\ti = node.n;\n\t\twhile (i >= 1 && value < node.k[i-1]) {\n\t\t\tnode.k[i] = node.k[i-1];\n\t\t\ti--;\n\t\t}\n\t\tnode.k[i] = value;\n\t\tnode.n++;\n\t\tsaveNode(nodePos, &node);\n\t}\n\telse { // wezel wewn.\n\t\tNode temp;\n\t\tint tempPos;\n\t\tfor (i=0; i<node.n; i++) // szukanie miejsca na wezel miedzy kluczami (przejscie do syna)\n\t\t\tif (value < node.k[i])\n\t\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (value >= node.k[i-1])\n\t\t\ttempPos = readNode(node.c[i], &temp);\n\t\tif (temp.n == 2*T-1) { // czy wezel-syn jest pelny?\n\t\t\tnodeSplit(node, temp, i, NODE, nodePos, tempPos);\n\t\t\treadNode(nodePos, &node);\n\t\t\tinsertValue(node, nodePos, value);\n\t\t\treturn;\n\t\t}\n\t\tinsertValue(temp, tempPos, value);\n\t}\n}\n\nvoid insert(int value) {\n\tNode root;\n\n\tif (rootPos == -1) { // drzewo puste -> tworzenie korzenia\n\t\troot.n = 1; root.k[0] = value; root.c[0] = -1;\n\t\trootPos = saveNode(0, &root);\n\t\tnextPos = rootPos + 1;\n\t\tsaveRoot();\n\t}\n\telse { // drzewo niepuste\n\t\treadNode(rootPos, &root);\n\t\tif (root.n == 2*T-1) { // czy korzen jest pelny?\n\t\t\tNode newRoot;\n\t\t\tnewRoot.n = 0;\n\t\t\tnewRoot.c[0] = rootPos;\n\t\t\tnodeSplit(newRoot, root, 0, ROOT, 0, rootPos);\n\t\t\trootPos = nextPos++;\n\t\t\tsaveRoot();\n\t\t\treadNode(rootPos, &root);\n\t\t}\n\t\tinsertValue(root, rootPos, value);\n\t}\n}\n\nvoid drukujB(int r, int p) {\n\t// drukuje B-drzewo o korzeniu r (pozycja w pliku)\n\t// wydruk przesuniety o p w prawo\n\tNode w;\n\tint i, j;\n\treadNode(r,&w);\n\tif (w.c[0] == -1) {\n\t\tfor (i=0;i<p;i++)\n\t\t\tprintf(\" \");\n\t\tfor (i=0;i<w.n;i++)\n\t\t\tprintf(\"%d \",w.k[i]);\n\t\tprintf(\"\\n\");\n\t} \n\telse {\n\t\tdrukujB(w.c[w.n],p+4);\n\t\tfor (i=w.n-1;i>=0;i--){\n\t\t\tfor (j=0;j<p;j++)\n\t\t\t\tprintf(\" \");\n\t\t\tprintf(\"%d\\n\",w.k[i]);\n\t\t\tdrukujB(w.c[i],p+4);\n\t\t}\n\t}\n}\n\n/* testowe wypisywanie danych z pliku */\nvoid printFile() {\n\tint i, j;\n\tNode temp;\n\t\n\treadRoot();\n\tprintf(\"rootPos: %i\\n\\n\", rootPos);\n\tfor (i=0; i<nextPos; i++) {\n\t\treadNode(i, &temp);\n\t\tprintf(\"__Node #%i of pos__\\n\", i);\n\t\tprintf(\"node.n: %i\\n\", temp.n);\n\t\tfor (j=0; j<2*T-1; j++)\n\t\t\tprintf(\"node.k[%i]: %i\\n\", j, temp.k[j]);\n\t\tfor (j=0; j<2*T; j++)\n\t\t\tprintf(\"node.c[%i]: %i\\n\", j, temp.c[j]);\n\t\tputs(\"\");\n\t}\n}\n\nint main() {\n\tint menu, value;\n\ttreeFile = fopen(\"b-tree.bt\", \"w+\");\n\t\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Dopisz nowa wartosc do drzewa\\n\");\n\t\tprintf(\"\\t3 - Wyswietl drzewo\\n\");\n\t\tprintf(\"\\t[TEST] 4 - Wyswietl dane z pliku\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &menu);\n\t\t\n\t\tswitch (menu) {\n\t\t\tcase 1:\n\t\t\t\tprintf(\"Podaj wartosc, ktora chcesz wprowadzic do drzewa: \");\n\t\t\t\tscanf(\"%i\", &value);\n\t\t\t\tinsert(value);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tdrukujB(rootPos, 0);\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tprintFile();\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tprintf(\"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\n\tfclose(treeFile);\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:51.872595"]]
  [1m[35m (26.1ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.4ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:51.902270"], ["description", "EncryptUtils"], ["lang_id", 6], ["snippet", "import sun.misc.BASE64Decoder;\nimport sun.misc.BASE64Encoder;\n\nimport java.io.IOException;\nimport java.io.UnsupportedEncodingException;\n\npublic class EncryptUtils {\n    public static final String DEFAULT_ENCODING=\"UTF-8\";\n    static BASE64Encoder enc=new BASE64Encoder();\n    static BASE64Decoder dec=new BASE64Decoder();\n\n    public static String base64encode(String text) {\n        try {\n            String rez = enc.encode(text.getBytes(DEFAULT_ENCODING));\n            return rez;\n        }\n        catch (UnsupportedEncodingException e) {\n            return null;\n        }\n    }\n\n    public static String base64decode(String text){\n\n        try {\n            return new String(dec.decodeBuffer( text ),DEFAULT_ENCODING);\n        }\n        catch (IOException e) {\n            return null;\n        }\n\n    }\n\n    public static String xorMessage(String message, String key) {\n        try {\n            if (message==null || key==null) return null;\n\n            char[] keys=key.toCharArray();\n            char[] mesg=message.toCharArray();\n\n            int ml=mesg.length;\n            int kl=keys.length;\n            char[] newmsg=new char[ml];\n\n            for (int i=0; i<ml; i++) {\n                newmsg[i]=(char)(mesg[i]^keys[i%kl]);\n            }\n            mesg=null; keys=null;\n            return new String(newmsg);\n        }\n        catch (Exception e) {\n            return null;\n        }\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:51.902270"]]
  [1m[36m (76.9ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.3ms)[0m  begin transaction
  [1m[36mSQL (0.6ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:51.984488"], ["description", "Connect singleton"], ["lang_id", 9], ["snippet", "<?php\n\nclass DBConnect {\n    protected static $connection;\n\n    private $dbms;\n    private $host;\n    private $db;\n    private $user;\n    private $password;\n\n    private $globals = array();\n\n    public function __construct($dbms, $host, $db, $user, $password) {\n        $this->dbms = $dbms;\n        $this->host = $host;\n        $this->db = $db;\n        $this->user = $user;\n        $this->password = $password;\n\n        $this->getConnection();\n    }\n\n    public function getConnection() {\n        if (!self::$connection) {\n            try {\n                self::$connection = new PDO($this->dbms . ':host=' . $this->host . ';dbname=' . $this->db, $this->user, $this->password);\n                self::$connection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);\n\n                if ($this->dbms == 'mysql')\n                    self::$connection->query('SET NAMES utf8');\n            } catch (PDOException $e) {\n                global $GLOBALS; // not necessary\n                $GLOBALS['db_error_bold'] = 'Database error: ';\n                $GLOBALS['db_error'] = 'Couldn\\'t connect to database';\n\n                return -1;\n            }\n        }\n\n        return self::$connection;\n    }\n\n}"], ["updated_at", "2014-05-21 08:55:51.984488"]]
  [1m[35m (12.2ms)[0m  commit transaction
  [1m[36m (0.1ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.5ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:52.001214"], ["description", "Fibbonaci recursive_function in Shell"], ["lang_id", 62], ["snippet", "#!/bin/bash\n\nfibbo=0;\ntemp=0;\nfor i in 'seq 0..20'; do\n\techo -n \"$fibbo\"\n\tif [ $i = 1]; then\n\t\t$((fibbo)) = 1\n\telif [ $i -gt 1]; then\n\t\t$((fibbo)) =\n\tfi\ndone"], ["updated_at", "2014-05-21 08:55:52.001214"]]
  [1m[36m (11.1ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.3ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:52.016034"], ["description", "Polynomial class"], ["lang_id", 6], ["snippet", "package mo.calc;\n\nimport java.util.List;\n\nimport org.paukov.combinatorics.Factory;\nimport org.paukov.combinatorics.Generator;\nimport org.paukov.combinatorics.ICombinatoricsVector;\n\npublic class Polynomial { // Interpolating Newton's method\n\tprivate Node node;\n\tprivate double[] b;\n\tprivate double[] W; // polynomial\n\n\tpublic Polynomial(Node node) {\n\t\tif (!node.isEmpty()) {\n\t\t\tthis.node = node;\n\t\t\tb = new double[node.getSize()];\n\t\t\tW = new double[node.getSize()];\n\t\t}\n\t\telse\n\t\t\tSystem.err.println(\"Error in [\" + this.getClass().getSimpleName() +\"]Constructor: Node is null!\");\n\t}\n\n\t/**\n\t * <b>Initial calculation</b>\n\t * Calculates <b>b</b>[] and <b>W</b>[] coefficients\n\t */\n\tpublic void init() {\n\t\tcalculateB();\n\t\tcalculateCoeffs();\n\t}\n\n\t/**\n\t * Set <b>x</b> into polynomial and calculate it\n\t */\n\tpublic double calculatePolynomial(Integer x) {\n\t\tdouble P = W[0]; // P = 0?\n\n\t\tif (W.length > 0)\n\t\t\tfor (int i = 1; i < W.length; i++)\n\t\t\t\tP += W[i]*Math.pow(x, i);\n\n\t\treturn P;\n\t}\n\n\t/**\n\t * Extends Node(x[], y[]) by adding new Node(<b>x</b>, <b>y</b>) and calculate it\n\t */\n\tpublic void extendNCalculate(Integer x, Integer y) {\n\t\tnode.extend(x, y);\n\t\tdouble[] tempB = new double[b.length + 1];\n\t\tdouble[] tempW = new double[W.length + 1];\n\t\tSystem.arraycopy(b, 0, tempB, 0, b.length);\n\t\tSystem.arraycopy(W, 0, tempW, 0, W.length);\n\t\tb = tempB;\n\t\tW = tempW;\n\n\t\tb[b.length - 1] = (node.getY(node.getSize() - 1) - calculatePolynomial(node.getX(node.getSize() - 1))) / calcProduct(node.getSize() - 1, node.getSize() - 2);\n\t\tcalculateCoeffs();\n\t}\n\n\tpublic void printPolynomial() {\n\t\tString s = \"P(x) = \" + W[0];\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printB() {\n\t\tString s = \"b[] = {\";\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \", \");\n\t\ts = s.concat(b[b.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic void printCoeffs() {\n\t\tString s = \"W[] = {\";\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \", \");\n\t\ts = s.concat(W[W.length - 1] + \"}\");\n\t\tSystem.out.println(s);\n\t}\n\n\tpublic String getTex() {\n\t\tString s = \"\\\\\\\\x[\\\\medspace] = [\";\n\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getX(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getX(b.length - 1) + \"]\\\\\\\\y[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < node.getSize() - 1; i++)\n\t\t\ts = s.concat(node.getY(i) + \",\\\\medspace\");\n\t\ts = s.concat(node.getY(b.length - 1) + \"]\\\\\\\\b[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < b.length - 1; i++)\n\t\t\ts = s.concat(b[i] + \",\\\\medspace\");\n\t\ts = s.concat(b[b.length - 1] + \"]\\\\\\\\W[\\\\medspace] = [\");\n\t\tfor (int i = 0; i < W.length - 1; i++)\n\t\t\ts = s.concat(W[i] + \",\\\\medspace\");\n\t\ts = s.concat(W[W.length - 1] + \"]\\\\\\\\P(x) = \" + W[0]);\n\n\t\tif (W.length > 0) {\n\t\t\tfor (int i = 1; i < W.length; i++) {\n\t\t\t\tif (W[i] > 0)\n\t\t\t\t\ts = s.concat(\" + \" + W[i]);\n\t\t\t\telse if (W[i] < 0)\n\t\t\t\t\ts = s.concat(\" - \" + -W[i]);\n\n\t\t\t\tif (W[i] != 0 && i > 1)\n\t\t\t\t\ts = s.concat(\"x^\" + i);\n\t\t\t\telse if (W[i] != 0 && i == 1)\n\t\t\t\t\ts = s.concat(\"x\");\n\t\t\t}\n\t\t}\n\n\t\treturn s;\n\t}\n\n\t/**\n\t * Calculates <b>b</b>[]\n\t */\n\tprivate void calculateB() {\n\t\tfor (int i = 0; i < b.length; i++)\n\t\t\tb[i] = (node.getY(i) - calcSeries(i, i-1)) / calcProduct(i, i-1);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[] coefficients\n\t */\n\tprivate void calculateCoeffs() {\n\t\tfor (int i = 0; i < W.length; i++)\n\t\t\tW[i] = calcCoeff(i, W.length - 1);\n\t}\n\n\t/**\n\t * Summing => b0 + b1(xi - x0) + ...\n\t */\n\tprivate double calcSeries(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 0;\n\t\telse\n\t\t\treturn (b[i] * calcProduct(iAtX, i-1)) + calcSeries(iAtX, --i);\n\t}\n\n\t/**\n\t * Multiplying => (xi - x0)(xi - x1)(xi - x2)...\n\t */\n\tprivate double calcProduct(int iAtX, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse\n\t\t\treturn (node.getX(iAtX) - node.getX(i)) * calcProduct(iAtX, --i);\n\t}\n\n\t/**\n\t * Calculates <b>W</b>[<b>i</b>]<br>\n\t * <b>i</b> is index\n\t */\n\tprivate double calcCoeff(int degree, int i) {\n\t\tif (degree == i)\n\t\t\treturn b[i];\n\t\telse\n\t\t\treturn b[i] * calcBrackets(degree, i-1) + calcCoeff(degree, --i);\n\t}\n\n\t/**\n\t * eg. (x2 - x1) + (x2 - x1) + (x1 - x0)\n\t */\n\tprivate int calcBrackets(int degree, int i) {\n\t\tif (i == -1)\n\t\t\treturn 1;\n\t\telse if (degree == 0)\n\t\t\treturn -node.getX(i) * calcBrackets(degree, --i);\n\t\telse\n\t\t\treturn calcSumOfProducts(degree, i+1);\n\t}\n\n\t/**\n\t * Extension of method <b>calcBracets</b>\n\t */\n\tprivate int calcSumOfProducts(int degree, int i) {\n\t\tICombinatoricsVector<Integer> vector = Factory.createVector(node.getXElements(i));\n\t\tGenerator<Integer> generator = Factory.createSimpleCombinationGenerator(vector, i - degree);\n\t\tList<ICombinatoricsVector<Integer>> temp = generator.generateAllObjects();\n\n\t\tint sum = 0;\n\t\tfor (int m = 0; m < temp.size(); m++) {\n\t\t\tint mul = 1;\n\t\t\tfor (int n = 0; n < temp.get(m).getSize(); n++) {\n\t\t\t\tmul *= -temp.get(m).getValue(n);\n\t\t\t}\n\t\t\tsum += mul;\n\t\t}\n\n\t\treturn sum;\n\t}\n}\n"], ["updated_at", "2014-05-21 08:55:52.016034"]]
  [1m[35m (45.1ms)[0m  commit transaction
  [1m[36m (0.2ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (0.9ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-21 08:55:52.065607"], ["description", "Imported DB Schema"], ["lang_id", 82], ["snippet", "<?xml version=\"1.0\" encoding=\"ISO-8859-1\" ?>\n<xs:schema xmlns:xs=\"http://www.w3.org/2001/XMLSchema\">\n\n  <xs:import schemaLocation=\"definedTypes.xsd\" namespace=\"http://www.w3.org/2001/XMLSchema\"/>\n\n  <xs:complexType name=\"blocked_until\">\n    <xs:all minOccurs=\"0\">\n      <xs:element name=\"date\" type=\"date\"/>\n      <xs:element name=\"time\" type=\"time\"/>\n    </xs:all>\n    <xs:attribute name=\"active\" type=\"boolean\" default=\"false\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"account\">\n    <xs:sequence>\n      <xs:element name=\"login\" type=\"loginST\"/>\n      <xs:element name=\"password\" type=\"password\"/>\n      <xs:element name=\"rest_access\" type=\"rest_accessST\" default=\"Player\"/>\n      <xs:element name=\"email\" type=\"emailST\"/>\n      <xs:element name=\"recovery_key\" type=\"recovery_key\"/>\n      <xs:element name=\"creation_date\" type=\"date\"/>\n      <xs:element name=\"creation_time\" type=\"time\"/>\n      <xs:element name=\"warn_level\" type=\"warn_level\"/>\n      <xs:element name=\"blocked_until\" type=\"blocked_until\"/>\n      <xs:element name=\"last_ip\" type=\"ipST\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"skills\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"skill\" type=\"skill\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"items\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"item\" type=\"item\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:complexType name=\"character\">\n    <xs:sequence>\n      <xs:element name=\"health\" type=\"integer\"/>\n      <xs:element name=\"max_health\" type=\"integer\"/>\n      <xs:choice>\n        <xs:element name=\"mana\" type=\"integer\"/>\n        <xs:element name=\"rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:choice>\n        <xs:element name=\"max_mana\" type=\"integer\"/>\n        <xs:element name=\"max_rage\" type=\"integer\"/>\n      </xs:choice>\n      <xs:element name=\"level\" type=\"integer\"/>\n      <xs:element name=\"experience\" type=\"integer\"/>\n      <xs:element name=\"strength\" type=\"integer\"/>\n      <xs:element name=\"agility\" type=\"integer\"/>\n      <xs:element name=\"intelligence\" type=\"integer\"/>\n      <xs:element name=\"skills\" type=\"skills\"/>\n      <xs:element name=\"equipped\" type=\"items\"/>\n      <xs:element name=\"items\" type=\"items\"/>\n      <xs:element name=\"skins\" type=\"value_list\"/>\n      <xs:element name=\"skin_id\" type=\"unique_id\"/>\n    </xs:sequence>\n    <xs:attribute name=\"id\" type=\"unique_id\"/>\n    <xs:attribute name=\"class\" type=\"classST\"/>\n    <xs:attribute name=\"gender\" type=\"genderST\"/>\n  </xs:complexType>\n\n  <xs:complexType name=\"character_list\">\n    <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n      <xs:element name=\"character\" type=\"character\"/>\n    </xs:sequence>\n  </xs:complexType>\n\n  <xs:element name=\"account_info\">\n    <xs:complexType>\n      <xs:sequence>\n        <xs:element name=\"account\" type=\"account\"/>\n        <xs:element name=\"character_list\" type=\"character_list\"/>\n      </xs:sequence>\n      <xs:attribute name=\"exported\" type=\"boolean\" fixed=\"true\"/>\n    </xs:complexType>\n    <xs:key name=\"unique_account\">\n      <xs:selector xpath=\"account\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:key>\n    <xs:unique name=\"unique_character\">\n      <xs:selector xpath=\"character_list/character\"/>\n      <xs:field xpath=\"@id\"/>\n    </xs:unique>\n  </xs:element>\n\n</xs:schema>"], ["updated_at", "2014-05-21 08:55:52.065607"]]
  [1m[36m (15.4ms)[0m  [1mcommit transaction[0m
  [1m[35m (0.5ms)[0m  begin transaction
  [1m[36mSQL (0.9ms)[0m  [1mINSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:55:52.089496"], ["description", "Algorytm wyszukiwania wzorca w tekscie"], ["lang_id", 2], ["snippet", "/*  Program obsluguje pliki o wielkosci <= 1MB\n *\tJako I argument podajemy nazwe pliku, na ktorym chcemy wykonac operacje wyszukania wzorca.\n *\tJako II argument podajemy wzorzec, ktorego chcemy poszukac w tekscie. Domyslnie wzorzec jest ustawiony na sztywno\n *\t\tdla pliku \"tekst.txt\"\n *\n *\tinfo. dodatkowe:\n *\t(instrukcja == NULL) == !instrukcja\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <conio.h>\n#include <string.h>\n#include <time.h>\n\n#define ASCII 256 // quantity of ascii characters\n#define PRIME 1009 // eg. 101, 1009, etc.\n#define E_SIZE 65536\n#define L_SIZE 1024\n#define F_SIZE 1048576 // file size, up to 1MB\n#define SPECIAL_SIZE 1048576\n\ntypedef char* string;\ntypedef enum {FALSE, TRUE} boolean;\n\nFILE *file;\nstring text;\nint textLength;\nint fileEncounter[SPECIAL_SIZE] = {0};\nint encounters = 0;\n\nboolean emptyFile() {\n\tfseek(file, 0, SEEK_END);\n\t\tif (ftell(file) == 0)\n\t\t\treturn TRUE;\n\tfseek(file, 0, SEEK_SET);\n\treturn FALSE;\n}\n\nstring getFile() {\n\tint i = 0;\n\tstring str = malloc(F_SIZE*sizeof(string));\n\tstring buffer = malloc(L_SIZE*sizeof(string));\n\n\twhile (feof(file) == 0) {\n\t\tfscanf(file, \"%s\\n\", buffer);\n\t\tstrcpy(str+i, buffer);\n\t\ti += strlen(buffer);\n\t}\n\n\treturn str;\n}\n\nvoid naiveAlgorithm(string pattern, int patternLength) {\n\tint i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\ttemp[patternLength] = '\\0';\n\n\tfor (i=0; i<=textLength-patternLength; i++) {\n\t\tif (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0)\n\t\t\tfileEncounter[encounters++] = i;\n\t}\n}\n\nvoid KMPAlgorithm(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i]))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid RKAlgorithm(string pattern, int patternLength) {\n\tint hash = 1, hashPattern = 0, hashText = 0, i;\n\tstring temp = malloc(patternLength*sizeof(string));\n\n\tfor (i=0; i<patternLength-1; i++) {\n\t\thash = (hash*ASCII)%PRIME;\n\t\thashPattern = (hashPattern*ASCII + pattern[i])%PRIME;\n\t\thashText = (hashText*ASCII + text[i])%PRIME;\n\t}\n\thashPattern = (hashPattern*ASCII + pattern[patternLength-1])%PRIME;\n\thashText = (hashText*ASCII + text[patternLength-1])%PRIME;\n\n\tfor (i=0; i<textLength-patternLength; i++) {\n\t\tif ((hashPattern == hashText) && (strcmp(strncpy(temp, text+i, patternLength), pattern) == 0))\n\t\t\tfileEncounter[encounters++] = i;\n\t\thashText = (ASCII*(hashText - text[i]*hash) + text[i+patternLength])%PRIME;\n\t\tif (hashText < 0)\n\t\t\thashText += PRIME;\n\t}\n}\n\nvoid FSMAlgorithm(string pattern, int patternLength) { // alphabet: acgt\n\tint FAMNext[L_SIZE][ASCII] = {{0}}, i, j;\n\tint getNextState(int state, int charNO) {\n\t\tif (state < patternLength && charNO == pattern[state])\n\t\t\treturn state+1;\n\n\t\tint ps, i; // ps = (prefix == sufix)\n\n\t\tfor (ps=state; ps>0; ps--)\n\t\t\tif (pattern[ps-1] == charNO) {\n\t\t\t\tfor (i=0; i<ps-1; i++)\n\t\t\t\t\tif (pattern[i] != pattern[state-ps+i+1])\n\t\t\t\t\t\tbreak;\n\t\t\t\tif (i == ps-1)\n\t\t\t\t\treturn ps;\n\t\t\t}\n\n\t\treturn 0;\n\t}\n\n\tfor (i=0; i<=patternLength; ++i)\n\t\tfor (j=0; j<ASCII; ++j)\n\t\t\tFAMNext[i][j] = getNextState(i, j);\n\n\tj = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\tj = FAMNext[j][(int)text[i]];\n\t\tif (j == patternLength)\n\t\t\tfileEncounter[encounters++] = i-patternLength+1;\n    }\n}\n\nvoid KMPAlgorithm_modified(string pattern, int patternLength) {\n\tint KMPNext[patternLength+1], i, b;\n\n\tKMPNext[0] = b = -1;\n\tfor (i=1; i<=patternLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != pattern[i - 1]))\n\t\t\tb = KMPNext[b];\n\t\t++b;\n\t\tif ((i == patternLength) || (pattern[i] != pattern[b]))\n\t\t\tKMPNext[i] = b;\n\t\telse\n\t\t\tKMPNext[i] = KMPNext[b];\n\t}\n\n\tb = 0;\n\tfor (i=0; i<textLength; i++) {\n\t\twhile ((b > -1) && (pattern[b] != text[i] && text[i] != '?'))\n\t\t\tb = KMPNext[b];\n\t\tif (++b == patternLength) {\n\t\t\tfileEncounter[encounters++] = i-b+1;\n\t\t\tb = KMPNext[b];\n\t\t}\n\t}\n}\n\nvoid printEncounters(string pattern, int patternLength) {\n\tint i;\n\n\tif (encounters > 0) {\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" znaleziono w sumie %i raz(y), w miejscach: \\n\", pattern, encounters);\n\t\tfor (i=0; i<encounters; i++)\n\t\t\tprintf(\"\\t* %i\\n\", fileEncounter[i]);\n\t}\n\telse\n\t\tprintf(\"\\nWzorzec \\\"%s\\\" nie zostal znaleziony w zadnym miejscu.\\n\", pattern);\n\tencounters = 0;\n}\n\nint main(int argc, char *argv[]) {\n\tif ((file = fopen(argv[1], \"r+\")) == NULL) {\n\t\tfprintf(stderr, \"Blad: Nie mozna otworzyc pliku o nazwie \\\"%s\\\"!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\ttext = getFile();\n\ttextLength = strlen(text);\n\tif (emptyFile() == TRUE) {\n\t\tfprintf(stderr, \"Blad: Plik \\\"%s\\\" jest pusty!\\n\", argv[1]);\n\t\texit(1);\n\t}\n\tstring pattern = argv[2];\n\tif (pattern == NULL)\n\t\tpattern = \"cggtagcggcgggggggagggcggtgggggcgagccggac\"; // default pattern\n\tint mainMenu, subMenu;\n\tint patternLength = strlen(pattern);\n\tif (patternLength > textLength) {\n\t\tfprintf(stderr, \"Blad: Dlugosc wzorca jest wieksza od dlugosci tekstu w pliku!\\n\");\n\t\texit(1);\n\t}\n\n\tclock_t start, stop;\n\tdouble naiveDuration, KMPDuration, RKDuration, FSMDuration;\n\n\twhile (TRUE) {\n\t\tsystem(\"cls\");\n\t\t// printf(\"text: %s\\ntextLength: %i\\npattern: %s\\npatternLength: %i\\n\", text, textLength, pattern, patternLength);\n\t\tprintf(\"\\t\\t__MENU__\\n\");\n\t\tprintf(\"\\t1 - Wykonaj wyszukiwanie wzorca dla wszystkich algorytmow\\n\\t    i przedstaw ich czasy wykonania.\\n\");\n\t\tprintf(\"\\t2 - Wykonaj wyszukiwanie wzorca dla okreslonego algorytmu.\\n\");\n\t\tprintf(\"\\t0 - Zakonczenie programu\\n\\n\");\n\t\tprintf(\"Co wybierasz? \");\n\t\tscanf(\"%i\", &mainMenu);\n\n\t\tswitch (mainMenu) {\n\t\t\tcase 1:\n\t\t\t\tstart = clock();\n\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tnaiveDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tstart = clock();\n\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\tstop = clock();\n\t\t\t\tKMPDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0) {\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tRKDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\t}\n\t\t\t\t\tstart = clock();\n\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\tstop = clock();\n\t\t\t\t\tFSMDuration = (double)(stop-start)/CLOCKS_PER_SEC;\n\t\t\t\tprintf(\"Czasy wykonania algorytmow: \\n\");\n\t\t\t\tprintf(\"\\t- naiwny algorytm: %2.5f\\n\", naiveDuration);\n\t\t\t\tprintf(\"\\t- algorytm KMP: %2.5f\\n\", KMPDuration);\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t- algorytm RK: %2.5f\\n\", RKDuration);\n\t\t\t\tprintf(\"\\t- algorytm FSM: %2.5f\\n\", FSMDuration);\n\t\t\t\tencounters = 0;\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tsystem(\"cls\");\n\t\t\t\tprintf(\"Algorytmy:\\n\");\n\t\t\t\tprintf(\"\\t1 - naiwny algorytm (oczywisty)\\n\");\n\t\t\t\tprintf(\"\\t2 - algorytm Knutha-Morrisa-Pratta\\n\");\n\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\tprintf(\"\\t3 - algorytm Rabina-Karpa\\n\");\n\t\t\t\tprintf(\"\\t4 - algorytm wykorzystujacy automat skonczony\\n\");\n\t\t\t\tprintf(\"\\t5 - zmodyfikowany algorytm Knutha-Morrisa-Pratta ('?')\\n\");\n\t\t\t\tprintf(\"\\t0 - poprzednie menu\\nTwoj wybor: \");\n\t\t\t\tscanf(\"%i\", &subMenu);\n\n\t\t\t\tswitch (subMenu) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tnaiveAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\tKMPAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tif (strcmp(argv[1], \"tekst.txt\") == 0)\n\t\t\t\t\t\t\tRKAlgorithm(pattern, patternLength);\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tfprintf(stderr, \"Blad: Algorytm Rabina-Karpa jest dostepny tylko dla pliku \\\"tekst.txt\\\"!\");\n\t\t\t\t\t\t\tgetch();\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 4:\n\t\t\t\t\t\tFSMAlgorithm(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 5:\n\t\t\t\t\t\tKMPAlgorithm_modified(pattern, patternLength);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 0:\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor algorytmu.\");\n\t\t\t\t\t\tgetch();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (subMenu >= 1 && subMenu <= 5) {\n\t\t\t\t\tprintEncounters(pattern, patternLength);\n\t\t\t\t\tgetch();\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase 0:\n\t\t\t\tfclose(file);\n\t\t\t\texit(0);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tfprintf(stderr, \"Blad: Niepoprawny wybor z menu. Sprobuj ponownie!\");\n\t\t\t\tgetch();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn 0;\n}"], ["updated_at", "2014-05-21 08:55:52.089496"]]
  [1m[35m (571.2ms)[0m  commit transaction


Started GET "/" for 127.0.0.1 at 2014-05-21 10:56:03 +0200
  [1m[36mActiveRecord::SchemaMigration Load (0.1ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (2.2ms)
Completed 200 OK in 3682ms (Views: 3681.3ms | ActiveRecord: 0.0ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-21 10:56:16 +0200
Processing by SnippetsController#index as HTML
  [1m[35m (0.1ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mSnippet Load (1.0ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0
  [1m[36mLang Load (0.3ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.4ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  Rendered snippets/_snippet.html.erb (548.4ms)
  Rendered snippets/index.html.erb within layouts/application (626.0ms)
Completed 200 OK in 696ms (Views: 690.6ms | ActiveRecord: 4.2ms)


Started GET "/snippets?page=2&_=1400662577013" for 127.0.0.1 at 2014-05-21 10:56:22 +0200
Processing by SnippetsController#index as JS
  Parameters: {"page"=>"2", "_"=>"1400662577013"}
  [1m[36mSnippet Load (0.8ms)[0m  [1mSELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 10[0m
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mLang Load (4.9ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  Rendered snippets/_snippet.html.erb (202.8ms)
  Rendered snippets/index.js.erb (239.8ms)
Completed 200 OK in 246ms (Views: 239.1ms | ActiveRecord: 6.6ms)


Started GET "/auth/github/" for 127.0.0.1 at 2014-05-21 10:56:25 +0200


Started GET "/auth/github/callback?code=c4a7b8d34186480382e1&state=3f72b9a3ba786685d5dea1678ff459e559203261a4eeecd6" for 127.0.0.1 at 2014-05-21 10:57:08 +0200
Processing by SessionsController#create as HTML
  Parameters: {"code"=>"c4a7b8d34186480382e1", "state"=>"3f72b9a3ba786685d5dea1678ff459e559203261a4eeecd6", "provider"=>"github"}
  [1m[36mUser Load (0.6ms)[0m  [1mSELECT  "users".* FROM "users"  WHERE "users"."provider" = 'github' AND "users"."uid" = '1146276' LIMIT 1[0m
  [1m[35m (0.1ms)[0m  begin transaction
  [1m[36mSQL (0.4ms)[0m  [1mINSERT INTO "users" ("created_at", "name", "provider", "uid", "updated_at") VALUES (?, ?, ?, ?, ?)[0m  [["created_at", "2014-05-21 08:57:10.017956"], ["name", "Dawid Zawadzki"], ["provider", "github"], ["uid", "1146276"], ["updated_at", "2014-05-21 08:57:10.017956"]]
  [1m[35m (109.1ms)[0m  commit transaction
Redirected to http://localhost:3000/
Completed 302 Found in 133ms (ActiveRecord: 110.7ms)


Started GET "/" for 127.0.0.1 at 2014-05-21 10:57:10 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 41ms (Views: 40.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 21:11:23 +0200
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (3.7ms)
Completed 200 OK in 1441ms (Views: 1441.2ms | ActiveRecord: 0.0ms)


Started GET "/snippets/new" for 127.0.0.1 at 2014-05-22 21:12:08 +0200
Processing by SnippetsController#new as HTML
Redirected to http://localhost:3000/snippets
Filter chain halted as :check_session rendered or redirected
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-22 21:12:08 +0200
Processing by SnippetsController#index as HTML
  [1m[35m (0.1ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mSnippet Load (113.5ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0
  [1m[36mLang Load (0.3ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  Rendered snippets/_snippet.html.erb (1075.5ms)
  Rendered snippets/index.html.erb within layouts/application (1351.4ms)
Completed 200 OK in 1522ms (Views: 1405.2ms | ActiveRecord: 115.7ms)
  [1m[36mActiveRecord::SchemaMigration Load (0.2ms)[0m  [1mSELECT "schema_migrations".* FROM "schema_migrations"[0m
  [1m[35mActiveRecord::SchemaMigration Load (0.1ms)[0m  SELECT "schema_migrations".* FROM "schema_migrations"
  [1m[36m (0.1ms)[0m  [1m            SELECT sql
            FROM sqlite_master
            WHERE name='index_snippets_on_lang_id' AND type='index'
            UNION ALL
            SELECT sql
            FROM sqlite_temp_master
            WHERE name='index_snippets_on_lang_id' AND type='index'
[0m


Started GET "/snippets/search" for 127.0.0.1 at 2014-05-22 22:07:26 +0200
Processing by SnippetsController#search as HTML
  [1m[36mLang Load (1.5ms)[0m  [1mSELECT "langs".* FROM "langs"   ORDER BY "langs"."order_type" ASC, "langs"."name" ASC[0m
  Rendered snippets/search.html.erb within layouts/application (43.9ms)
Completed 200 OK in 107ms (Views: 104.7ms | ActiveRecord: 1.9ms)


Started GET "/snippets?snippet=&lang_id=&description=bla&button=" for 127.0.0.1 at 2014-05-22 22:07:35 +0200
Processing by SnippetsController#index as HTML
  Parameters: {"snippet"=>"", "lang_id"=>"", "description"=>"bla", "button"=>""}
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "snippets"  WHERE (description LIKE '%bla%')
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"  WHERE (description LIKE '%bla%')[0m
  [1m[35mCACHE (0.0ms)[0m  SELECT COUNT(*) FROM "snippets"  WHERE (description LIKE '%bla%')
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"  WHERE (description LIKE '%bla%')[0m
  [1m[35mSnippet Load (0.3ms)[0m  SELECT  "snippets".* FROM "snippets"  WHERE (description LIKE '%bla%')  ORDER BY created_at DESC LIMIT 10 OFFSET 0
  Rendered collection (0.0ms)
  Rendered snippets/index.html.erb within layouts/application (3.0ms)
Completed 200 OK in 50ms (Views: 44.7ms | ActiveRecord: 1.2ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 22:21:08 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 68ms (Views: 67.1ms | ActiveRecord: 0.0ms)


Started GET "/auth/github/" for 127.0.0.1 at 2014-05-22 22:25:36 +0200


Started GET "/auth/github/callback?code=ed79332e6caef2bc8571&state=5d58431f20ad96d12787b9967739a3228b8021ca27704b2f" for 127.0.0.1 at 2014-05-22 22:25:37 +0200
Processing by SessionsController#create as HTML
  Parameters: {"code"=>"ed79332e6caef2bc8571", "state"=>"5d58431f20ad96d12787b9967739a3228b8021ca27704b2f", "provider"=>"github"}
  [1m[36mUser Load (0.3ms)[0m  [1mSELECT  "users".* FROM "users"  WHERE "users"."provider" = 'github' AND "users"."uid" = '1146276' LIMIT 1[0m
Redirected to http://localhost:3000/
Completed 302 Found in 13ms (ActiveRecord: 0.8ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 22:25:40 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 38ms (Views: 37.7ms | ActiveRecord: 0.0ms)


Started GET "/signout" for 127.0.0.1 at 2014-05-22 22:25:48 +0200
Processing by SessionsController#destroy as HTML
Redirected to http://localhost:3000/
Completed 302 Found in 2ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 22:25:48 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 57ms (Views: 56.7ms | ActiveRecord: 0.0ms)


Started GET "/auth/github/" for 127.0.0.1 at 2014-05-22 22:25:50 +0200


Started GET "/auth/github/callback?code=a45dbcf5ac93b4dd9047&state=71d08da128b8308960436b3df9d174ad4d07fef0ac87c28a" for 127.0.0.1 at 2014-05-22 22:25:51 +0200
Processing by SessionsController#create as HTML
  Parameters: {"code"=>"a45dbcf5ac93b4dd9047", "state"=>"71d08da128b8308960436b3df9d174ad4d07fef0ac87c28a", "provider"=>"github"}
  [1m[35mUser Load (0.2ms)[0m  SELECT  "users".* FROM "users"  WHERE "users"."provider" = 'github' AND "users"."uid" = '1146276' LIMIT 1
Redirected to http://localhost:3000/
Completed 302 Found in 2ms (ActiveRecord: 0.2ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 22:25:53 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 38ms (Views: 37.8ms | ActiveRecord: 0.0ms)


Started GET "/snippets/search" for 127.0.0.1 at 2014-05-22 22:55:58 +0200
Processing by SnippetsController#search as HTML
  [1m[36mLang Load (1.3ms)[0m  [1mSELECT "langs".* FROM "langs"   ORDER BY "langs"."order_type" ASC, "langs"."name" ASC[0m
  Rendered snippets/search.html.erb within layouts/application (12.4ms)
Completed 200 OK in 50ms (Views: 48.2ms | ActiveRecord: 1.3ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 23:05:13 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 43ms (Views: 42.6ms | ActiveRecord: 0.0ms)


Started GET "/about" for 127.0.0.1 at 2014-05-22 23:06:04 +0200
Processing by AboutController#index as HTML
  Rendered about/index.html.erb within layouts/application (12.6ms)
Completed 200 OK in 65ms (Views: 65.1ms | ActiveRecord: 0.0ms)


Started GET "/snippets/new" for 127.0.0.1 at 2014-05-22 23:06:44 +0200
Processing by SnippetsController#new as HTML
  [1m[35mLang Load (1.3ms)[0m  SELECT "langs".* FROM "langs"   ORDER BY "langs"."order_type" ASC, "langs"."name" ASC
  Rendered snippets/_form.html.erb (47.3ms)
  Rendered snippets/new.html.erb within layouts/application (49.4ms)
Completed 200 OK in 88ms (Views: 85.8ms | ActiveRecord: 1.3ms)


Started POST "/snippets" for 127.0.0.1 at 2014-05-22 23:36:01 +0200
Processing by SnippetsController#create as HTML
  Parameters: {"utf8"=>"✓", "authenticity_token"=>"QO5HgDvgaff224TT4saDyxjptKlfdNe6NNBhcs4hMFY=", "snippet"=>{"snippet"=>"ads", "lang_id"=>"8", "description"=>"asd"}, "button"=>""}
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 8]]
  [1m[35mLang Load (1.2ms)[0m  SELECT "langs".* FROM "langs"
  [1m[36m (0.5ms)[0m  [1mbegin transaction[0m
  [1m[35mSQL (1.4ms)[0m  INSERT INTO "snippets" ("created_at", "description", "lang_id", "snippet", "updated_at") VALUES (?, ?, ?, ?, ?)  [["created_at", "2014-05-22 21:36:01.242525"], ["description", "asd"], ["lang_id", 8], ["snippet", "ads"], ["updated_at", "2014-05-22 21:36:01.242525"]]
  [1m[36m (207.5ms)[0m  [1mcommit transaction[0m
Redirected to http://localhost:3000/snippets/37
Completed 302 Found in 235ms (ActiveRecord: 210.9ms)


Started GET "/snippets/37" for 127.0.0.1 at 2014-05-22 23:36:01 +0200
Processing by SnippetsController#show as HTML
  Parameters: {"id"=>"37"}
  [1m[35mSnippet Load (0.3ms)[0m  SELECT  "snippets".* FROM "snippets"  WHERE "snippets"."id" = ? LIMIT 1  [["id", 37]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 8]]
  Rendered snippets/show.html.erb within layouts/application (17.0ms)
Completed 200 OK in 68ms (Views: 66.3ms | ActiveRecord: 0.4ms)


Started GET "/" for 127.0.0.1 at 2014-05-22 23:58:27 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 60ms (Views: 59.4ms | ActiveRecord: 0.0ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-22 23:58:29 +0200
Processing by SnippetsController#index as HTML
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mSnippet Load (0.7ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 8]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 82]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 62]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 9]]
  [1m[36mCACHE (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.5ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 11]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  Rendered snippets/_snippet.html.erb (271.2ms)
  Rendered snippets/index.html.erb within layouts/application (341.0ms)
Completed 200 OK in 385ms (Views: 381.5ms | ActiveRecord: 2.4ms)


Started GET "/snippets/37" for 127.0.0.1 at 2014-05-22 23:58:32 +0200
Processing by SnippetsController#show as HTML
  Parameters: {"id"=>"37"}
  [1m[36mSnippet Load (0.1ms)[0m  [1mSELECT  "snippets".* FROM "snippets"  WHERE "snippets"."id" = ? LIMIT 1[0m  [["id", 37]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 8]]
  Rendered snippets/show.html.erb within layouts/application (14.6ms)
Completed 200 OK in 54ms (Views: 53.1ms | ActiveRecord: 0.2ms)


Started GET "/snippets/new" for 127.0.0.1 at 2014-05-23 00:32:06 +0200
Processing by SnippetsController#new as HTML
  [1m[36mLang Load (2.2ms)[0m  [1mSELECT "langs".* FROM "langs"   ORDER BY "langs"."order_type" ASC, "langs"."name" ASC[0m
  Rendered snippets/_form.html.erb (26.4ms)
  Rendered snippets/new.html.erb within layouts/application (39.7ms)
Completed 200 OK in 96ms (Views: 93.3ms | ActiveRecord: 2.2ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-23 01:13:14 +0200
Processing by SnippetsController#index as HTML
  [1m[35m (0.3ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mSnippet Load (3.0ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0
  [1m[36mLang Load (0.3ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 8]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 82]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 62]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 9]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 11]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  Rendered snippets/_snippet.html.erb (260.7ms)
  Rendered snippets/index.html.erb within layouts/application (329.5ms)
Completed 200 OK in 392ms (Views: 386.5ms | ActiveRecord: 4.6ms)


Started GET "/" for 127.0.0.1 at 2014-05-23 01:13:39 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.1ms)
Completed 200 OK in 57ms (Views: 57.3ms | ActiveRecord: 0.0ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-23 01:13:40 +0200
Processing by SnippetsController#index as HTML
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mCACHE (0.0ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mSnippet Load (1.1ms)[0m  [1mSELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 8]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.3ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (338.7ms)
  Rendered snippets/index.html.erb within layouts/application (398.1ms)
Completed 200 OK in 462ms (Views: 457.8ms | ActiveRecord: 2.8ms)


Started GET "/signout" for 127.0.0.1 at 2014-05-23 01:41:25 +0200
Processing by SessionsController#destroy as HTML
Redirected to http://localhost:3000/
Completed 302 Found in 1ms (ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-05-23 01:41:25 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.0ms)
Completed 200 OK in 34ms (Views: 33.5ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-05-23 01:41:27 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.0ms)
Completed 200 OK in 71ms (Views: 70.4ms | ActiveRecord: 0.0ms)


Started GET "/" for 127.0.0.1 at 2014-05-23 01:41:29 +0200
Processing by WelcomeController#index as HTML
  Rendered welcome/index.html.erb within layouts/application (0.0ms)
Completed 200 OK in 40ms (Views: 39.6ms | ActiveRecord: 0.0ms)


Started GET "/auth/github/" for 127.0.0.1 at 2014-05-23 01:43:50 +0200


Started GET "/auth/github/callback?code=9040775b11b18c26f866&state=f240e6abb8550a7a58e35a0d57d5bf451bd316c1c250bb26" for 127.0.0.1 at 2014-05-23 01:43:51 +0200
Processing by SessionsController#create as HTML
  Parameters: {"code"=>"9040775b11b18c26f866", "state"=>"f240e6abb8550a7a58e35a0d57d5bf451bd316c1c250bb26", "provider"=>"github"}
  [1m[35mUser Load (0.3ms)[0m  SELECT  "users".* FROM "users"  WHERE "users"."provider" = 'github' AND "users"."uid" = '1146276' LIMIT 1
Redirected to http://localhost:3000/
Completed 302 Found in 2ms (ActiveRecord: 0.3ms)


Started GET "/snippets" for 127.0.0.1 at 2014-05-23 01:43:53 +0200
Processing by SnippetsController#index as HTML
  [1m[36m (0.3ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mCACHE (0.0ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mSnippet Load (1.0ms)[0m  [1mSELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 8]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (173.5ms)
  Rendered snippets/index.html.erb within layouts/application (220.8ms)
Completed 200 OK in 256ms (Views: 252.9ms | ActiveRecord: 2.1ms)


Started GET "/snippets?page=2&_=1400802233623" for 127.0.0.1 at 2014-05-23 01:45:48 +0200
Processing by SnippetsController#index as JS
  Parameters: {"page"=>"2", "_"=>"1400802233623"}
  [1m[35mSnippet Load (0.9ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 10
  [1m[36m (0.1ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (160.2ms)
  Rendered snippets/index.js.erb (199.2ms)
Completed 200 OK in 231ms (Views: 228.4ms | ActiveRecord: 1.8ms)


Started GET "/snippets?_=1400802233624&page=3" for 127.0.0.1 at 2014-05-23 01:46:17 +0200
Processing by SnippetsController#index as JS
  Parameters: {"_"=>"1400802233624", "page"=>"3"}
  [1m[35mSnippet Load (3.5ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 20
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  Rendered snippets/_snippet.html.erb (173.2ms)
  Rendered snippets/index.js.erb (220.3ms)
Completed 200 OK in 230ms (Views: 224.1ms | ActiveRecord: 4.9ms)


Started GET "/snippets?_=1400802233625&page=4" for 127.0.0.1 at 2014-05-23 01:46:42 +0200
Processing by SnippetsController#index as JS
  Parameters: {"_"=>"1400802233625", "page"=>"4"}
  [1m[35mSnippet Load (1.0ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 30
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 11]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 7]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 9]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (121.0ms)
  Rendered snippets/index.js.erb (139.6ms)
Completed 200 OK in 144ms (Views: 140.7ms | ActiveRecord: 1.7ms)


Started GET "/snippets/?page=1" for 127.0.0.1 at 2014-05-23 01:49:03 +0200
Processing by SnippetsController#index as HTML
  Parameters: {"page"=>"1"}
  [1m[35m (0.2ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mSnippet Load (0.8ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 8]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 82]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 62]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 9]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 11]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  Rendered snippets/_snippet.html.erb (186.1ms)
  Rendered snippets/index.html.erb within layouts/application (242.1ms)
Completed 200 OK in 277ms (Views: 274.0ms | ActiveRecord: 2.0ms)


Started GET "/snippets/" for 127.0.0.1 at 2014-05-23 01:49:07 +0200
Processing by SnippetsController#index as HTML
  [1m[36m (0.2ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mCACHE (0.0ms)[0m  SELECT COUNT(*) FROM "snippets"
  [1m[36mSnippet Load (0.7ms)[0m  [1mSELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 0[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 8]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (296.0ms)
  Rendered snippets/index.html.erb within layouts/application (394.1ms)
Completed 200 OK in 447ms (Views: 443.9ms | ActiveRecord: 2.0ms)


Started GET "/snippets?page=2&_=1400802548104" for 127.0.0.1 at 2014-05-23 01:49:11 +0200
Processing by SnippetsController#index as JS
  Parameters: {"page"=>"2", "_"=>"1400802548104"}
  [1m[35mSnippet Load (0.6ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 10
  [1m[36m (0.1ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 6]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (230.4ms)
  Rendered snippets/index.js.erb (296.0ms)
Completed 200 OK in 301ms (Views: 298.0ms | ActiveRecord: 1.7ms)


Started GET "/snippets?_=1400802548105&page=3" for 127.0.0.1 at 2014-05-23 01:49:13 +0200
Processing by SnippetsController#index as JS
  Parameters: {"_"=>"1400802548105", "page"=>"3"}
  [1m[35mSnippet Load (1.0ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 20
  [1m[36m (0.1ms)[0m  [1mSELECT COUNT(*) FROM "snippets"[0m
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 11]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 7]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 82]]
  [1m[36mLang Load (0.2ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 62]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 9]]
  Rendered snippets/_snippet.html.erb (150.9ms)
  Rendered snippets/index.js.erb (191.8ms)
Completed 200 OK in 207ms (Views: 203.6ms | ActiveRecord: 2.3ms)


Started GET "/snippets?_=1400802548106&page=4" for 127.0.0.1 at 2014-05-23 01:49:15 +0200
Processing by SnippetsController#index as JS
  Parameters: {"_"=>"1400802548106", "page"=>"4"}
  [1m[35mSnippet Load (0.8ms)[0m  SELECT  "snippets".* FROM "snippets"   ORDER BY created_at DESC LIMIT 10 OFFSET 30
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 6]]
  [1m[35mLang Load (0.1ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 11]]
  [1m[35mCACHE (0.0ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 2]]
  [1m[36mLang Load (0.1ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 7]]
  [1m[35mLang Load (0.2ms)[0m  SELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1  [["id", 9]]
  [1m[36mCACHE (0.0ms)[0m  [1mSELECT  "langs".* FROM "langs"  WHERE "langs"."id" = ? LIMIT 1[0m  [["id", 2]]
  Rendered snippets/_snippet.html.erb (95.6ms)
  Rendered snippets/index.js.erb (124.3ms)
Completed 200 OK in 127ms (Views: 124.7ms | ActiveRecord: 1.5ms)
